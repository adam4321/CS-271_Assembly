Microsoft (R) Macro Assembler Version 14.24.28314.0	    01/19/20 16:24:37
/Program 1                 Program1_wrighada.as		     Page 1 - 1


				TITLE Program 1                 Program1_wrighada.asm

				; Author:						Adam Wright
				; Last Modified:				1-16-2020
				; OSU email address:			wrighada@oregonstate.edu
				; Course number/section:		cs271-400
				; Project Number:               1  
				; Due Date:						1-19-2020
				; Description:					Assembly program which prompts the user for
				;								three integers in descending order and then
				;								calculates the sum and difference of the sets
				;								(A+B, A-B, A+C, A-C, B+C, B-C, A+B+C, B-A, C-A, C-B, C-B-A)  
				;								and displays it to the user

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; Variable definitions

 00000000			.data
 00000000 41 64 61 6D 20	intro		BYTE	"Adam Wright  --  Program-1 -- Sums and differences", 0
	   57 72 69 67 68
	   74 20 20 2D 2D
	   20 20 50 72 6F
	   67 72 61 6D 2D
	   31 20 2D 2D 20
	   53 75 6D 73 20
	   61 6E 64 20 64
	   69 66 66 65 72
	   65 6E 63 65 73
	   00
 00000033 2A 2A 45 43 2D	extCred1	BYTE	"**EC-1: Program repeats until the user chooses to quit", 0
	   31 3A 20 50 72
	   6F 67 72 61 6D
	   20 72 65 70 65
	   61 74 73 20 75
	   6E 74 69 6C 20
	   74 68 65 20 75
	   73 65 72 20 63
	   68 6F 6F 73 65
	   73 20 74 6F 20
	   71 75 69 74 00
 0000006A 2A 2A 45 43 2D	extCred2	BYTE	"**EC-2: Program verifies the numbers are in descending order", 0
	   32 3A 20 50 72
	   6F 67 72 61 6D
	   20 76 65 72 69
	   66 69 65 73 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 61 72 65
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   00
 000000A7 2A 2A 45 43 2D	extCred3	BYTE	"**EC-3: Handles negative results and computes B-A, C-A, C-B, C-B-A", 0
	   33 3A 20 48 61
	   6E 64 6C 65 73
	   20 6E 65 67 61
	   74 69 76 65 20
	   72 65 73 75 6C
	   74 73 20 61 6E
	   64 20 63 6F 6D
	   70 75 74 65 73
	   20 42 2D 41 2C
	   20 43 2D 41 2C
	   20 43 2D 42 2C
	   20 43 2D 42 2D
	   41 00
 000000EA 45 6E 74 65 72	instrctMsg	BYTE	"Enter 3 numbers A > B > C, and I'll show you the sums and differences!", 0
	   20 33 20 6E 75
	   6D 62 65 72 73
	   20 41 20 3E 20
	   42 20 3E 20 43
	   2C 20 61 6E 64
	   20 49 27 6C 6C
	   20 73 68 6F 77
	   20 79 6F 75 20
	   74 68 65 20 73
	   75 6D 73 20 61
	   6E 64 20 64 69
	   66 66 65 72 65
	   6E 63 65 73 21
	   00
 00000131 46 69 72 73 74	firPrompt	BYTE	"First number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 00000140 53 65 63 6F 6E	secPrompt	BYTE	"Second number: ", 0
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000150 54 68 69 72 64	thrdPrompt	BYTE	"Third number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 0000015F 45 72 72 6F 72	errPrompt	BYTE	"Error: The numbers must be in descending order", 0
	   3A 20 54 68 65
	   20 6E 75 6D 62
	   65 72 73 20 6D
	   75 73 74 20 62
	   65 20 69 6E 20
	   64 65 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 00
 0000018E 50 72 65 73 73	quitPrompt	BYTE	"Press 1 to quit and 2 to continue: ", 0
	   20 31 20 74 6F
	   20 71 75 69 74
	   20 61 6E 64 20
	   32 20 74 6F 20
	   63 6F 6E 74 69
	   6E 75 65 3A 20
	   00
 000001B2 20 2B 20 00		addSym		BYTE	" + ", 0
 000001B6 20 2D 20 00		subSym		BYTE	" - ", 0
 000001BA 20 3D 20 00		eqlSym		BYTE	" = ", 0
 000001BE 47 6F 6F 64 2D	goodBye		BYTE	"Good-bye !!!", 0
	   62 79 65 20 21
	   21 21 00
 000001CB 00000000		numA		SDWORD	?																					; Integer A to be entered by user
 000001CF 00000000		numB		SDWORD	?																					; Integer B to be entered by user
 000001D3 00000000		numC		SDWORD	?																					; Integer C to be entered by user
 000001D7 00000000		resAPlusB	SDWORD	?																					; Result of A Plus B
 000001DB 00000000		resAMinB	SDWORD	?																					; Result of A Minus B
 000001DF 00000000		resAPlusC	SDWORD	?																					; Result of A Plus C
 000001E3 00000000		resAMinC	SDWORD	?																					; Result of A Minus B
 000001E7 00000000		resBPlusC	SDWORD	?																					; Result of B Plus C
 000001EB 00000000		resBMinC	SDWORD	?																					; Result of B Minus C
 000001EF 00000000		resABC		SDWORD	?																					; Result of A Plus B Plus C
 000001F3 00000000		resBMinA	SDWORD	?																					; Result of B Minus A
 000001F7 00000000		resCMinA	SDWORD	?																					; Result of C Minus A
 000001FB 00000000		resCMinB	SDWORD	?																					; Result of C Minus B
 000001FF 00000000		resCBA		SDWORD	?																					; Result of C Minus B Minus A


				; Executable instructions

 00000000			.code  
 00000000			main PROC

				; Introduce programmer, title, and extra credit options
 00000000  E8 00000000 E		call	CrLf
 00000005  BA 00000000 R		mov		edx, OFFSET intro
 0000000A  E8 00000000 E		call	WriteString
 0000000F  E8 00000000 E		call	CrLf
 00000014  E8 00000000 E		call	CrLf
 00000019  BA 00000033 R		mov		edx, OFFSET extCred1
 0000001E  E8 00000000 E		call	WriteString
 00000023  E8 00000000 E		call	CrLf
 00000028  BA 0000006A R		mov		edx, OFFSET extCred2
 0000002D  E8 00000000 E		call	WriteString
 00000032  E8 00000000 E		call	CrLf
 00000037  BA 000000A7 R		mov		edx, OFFSET extCred3
 0000003C  E8 00000000 E		call	WriteString
 00000041  E8 00000000 E		call	CrLf
 00000046  E8 00000000 E		call	CrLf

				; Print the instructions
 0000004B  BA 000000EA R		mov		edx, OFFSET instrctMsg
 00000050  E8 00000000 E		call	WriteString
 00000055  E8 00000000 E		call	CrLf


 0000005A			START_LOOP:														; User can press 2 and continue with JMP From: line-310

				; Prompt for first number										; Prompt for 3 numbers
 0000005A  E8 00000000 E		call	CrLf
 0000005F  BA 00000131 R		mov		edx, OFFSET firPrompt
 00000064  E8 00000000 E		call	WriteString
 00000069  E8 00000000 E		call	ReadInt
 0000006E  A3 000001CB R		mov		numA, eax

				; Prompt for second number
 00000073  BA 00000140 R		mov		edx, OFFSET secPrompt
 00000078  E8 00000000 E		call	WriteString
 0000007D  E8 00000000 E		call	ReadInt
 00000082  A3 000001CF R		mov		numB, eax

				; Prompt for third number
 00000087  BA 00000150 R		mov		edx, OFFSET thrdPrompt
 0000008C  E8 00000000 E		call	WriteString
 00000091  E8 00000000 E		call	ReadInt
 00000096  A3 000001D3 R		mov		numC, eax
 0000009B  E8 00000000 E		call	CrLf

				; Check for descending order									; Success JMP To: line-120 or Fail JMP To: line-111
 000000A0  A1 000001CB R		mov		eax, numA
 000000A5  3B 05 000001CF R		cmp		eax, numB
 000000AB  76 0F			jbe		INPUT_ERROR
 000000AD  A1 000001CF R		mov		eax, numB
 000000B2  3B 05 000001D3 R		cmp		eax, numC
 000000B8  76 02			jbe		INPUT_ERROR
 000000BA  EB 11			jmp		MATH


 000000BC			INPUT_ERROR:													; JMP From: line-104 or 107 if the input numbers aren't in descending order

				; Non-descending input numbers Error Message
 000000BC  BA 0000015F R		mov		edx, OFFSET	errPrompt
 000000C1  E8 00000000 E		call	WriteString
 000000C6  E8 00000000 E		call	CrLf
 000000CB  EB 8D			Jmp		START_LOOP											; After error message JMP To: line-79 to request numbers again


 000000CD			MATH:															; JMP From: line-108 - Input tests pass  ---  Start Math section

				; Add numA numB and store result in resAPlusB and Display		; A + B
 000000CD  A1 000001CB R		mov		eax, numA
 000000D2  E8 00000000 E		call	WriteInt
 000000D7  BA 000001B2 R		mov		edx, OFFSET addSym
 000000DC  E8 00000000 E		call	WriteString
 000000E1  A1 000001CF R		mov		eax, numB
 000000E6  E8 00000000 E		call	WriteInt
 000000EB  BA 000001BA R		mov		edx, OFFSET eqlSym
 000000F0  E8 00000000 E		call	WriteString
 000000F5  03 05 000001CB R		add		eax, numA
 000000FB  A3 000001D7 R		mov		resAPlusB, eax
 00000100  A1 000001D7 R		mov		eax, resAPlusB
 00000105  E8 00000000 E		call	WriteInt
 0000010A  E8 00000000 E		call	CrLf

				; Sub numA numB and store result in resAMinB and Display		; A - B
 0000010F  A1 000001CB R		mov		eax, numA
 00000114  E8 00000000 E		call	WriteInt
 00000119  BA 000001B6 R		mov		edx, OFFSET subSym
 0000011E  E8 00000000 E		call	WriteString
 00000123  A1 000001CF R		mov		eax, numB
 00000128  E8 00000000 E		call	WriteInt
 0000012D  BA 000001BA R		mov		edx, OFFSET eqlSym
 00000132  E8 00000000 E		call	WriteString
 00000137  A1 000001CB R		mov		eax, numA
 0000013C  2B 05 000001CF R		sub		eax, numB
 00000142  A3 000001DB R		mov		resAMinB, eax
 00000147  A1 000001DB R		mov		eax, resAMinB
 0000014C  E8 00000000 E		call	WriteInt
 00000151  E8 00000000 E		call	CrLf

				; Add numA numC and store result in resAPlusC and Display		; A + C
 00000156  A1 000001CB R		mov		eax, numA
 0000015B  E8 00000000 E		call	WriteInt
 00000160  BA 000001B2 R		mov		edx, OFFSET addSym
 00000165  E8 00000000 E		call	WriteString
 0000016A  A1 000001D3 R		mov		eax, numC
 0000016F  E8 00000000 E		call	WriteInt
 00000174  BA 000001BA R		mov		edx, OFFSET eqlSym
 00000179  E8 00000000 E		call	WriteString
 0000017E  03 05 000001CB R		add		eax, numA
 00000184  A3 000001DF R		mov		resAPlusC, eax
 00000189  A1 000001DF R		mov		eax, resAPlusC
 0000018E  E8 00000000 E		call	WriteInt
 00000193  E8 00000000 E		call	CrLf

				; Sub numA numC and store result in resAMinC and Display		; A - C
 00000198  A1 000001CB R		mov		eax, numA
 0000019D  E8 00000000 E		call	WriteInt
 000001A2  BA 000001B6 R		mov		edx, OFFSET subSym
 000001A7  E8 00000000 E		call	WriteString
 000001AC  A1 000001D3 R		mov		eax, numC
 000001B1  E8 00000000 E		call	WriteInt
 000001B6  BA 000001BA R		mov		edx, OFFSET eqlSym
 000001BB  E8 00000000 E		call	WriteString
 000001C0  A1 000001CB R		mov		eax, numA
 000001C5  2B 05 000001D3 R		sub		eax, numC
 000001CB  A3 000001E3 R		mov		resAMinC, eax
 000001D0  A1 000001E3 R		mov		eax, resAMinC
 000001D5  E8 00000000 E		call	WriteInt
 000001DA  E8 00000000 E		call	CrLf

				; Add numB numC and store result in resBPlusC and Display		; B + C
 000001DF  A1 000001CF R		mov		eax, numB
 000001E4  E8 00000000 E		call	WriteInt
 000001E9  BA 000001B2 R		mov		edx, OFFSET addSym
 000001EE  E8 00000000 E		call	WriteString
 000001F3  A1 000001D3 R		mov		eax, numC
 000001F8  E8 00000000 E		call	WriteInt
 000001FD  BA 000001BA R		mov		edx, OFFSET eqlSym
 00000202  E8 00000000 E		call	WriteString
 00000207  03 05 000001CF R		add		eax, numB
 0000020D  A3 000001E7 R		mov		resBPlusC, eax
 00000212  A1 000001E7 R		mov		eax, resBPlusC
 00000217  E8 00000000 E		call	WriteInt
 0000021C  E8 00000000 E		call	CrLf

				; Sub numB numC and store result in resBMinC and Display		; B - C
 00000221  A1 000001CF R		mov		eax, numB
 00000226  E8 00000000 E		call	WriteInt
 0000022B  BA 000001B6 R		mov		edx, OFFSET subSym
 00000230  E8 00000000 E		call	WriteString
 00000235  A1 000001D3 R		mov		eax, numC
 0000023A  E8 00000000 E		call	WriteInt
 0000023F  BA 000001BA R		mov		edx, OFFSET eqlSym
 00000244  E8 00000000 E		call	WriteString
 00000249  A1 000001CF R		mov		eax, numB
 0000024E  2B 05 000001D3 R		sub		eax, numC
 00000254  A3 000001EB R		mov		resBMinC, eax
 00000259  A1 000001EB R		mov		eax, resBMinC
 0000025E  E8 00000000 E		call	WriteInt
 00000263  E8 00000000 E		call	CrLf

				; Add numC resAPlusB store result in resABC and Display			; A + B + C
 00000268  A1 000001CB R		mov		eax, numA
 0000026D  E8 00000000 E		call	WriteInt
 00000272  BA 000001B2 R		mov		edx, OFFSET addSym
 00000277  E8 00000000 E		call	WriteString
 0000027C  A1 000001CF R		mov		eax, numB
 00000281  E8 00000000 E		call	WriteInt
 00000286  BA 000001B2 R		mov		edx, OFFSET addSym
 0000028B  E8 00000000 E		call	WriteString
 00000290  A1 000001D3 R		mov		eax, numC
 00000295  E8 00000000 E		call	WriteInt
 0000029A  BA 000001BA R		mov		edx, OFFSET eqlSym
 0000029F  E8 00000000 E		call	WriteString
 000002A4  03 05 000001D7 R		add		eax, resAPlusB
 000002AA  A3 000001EF R		mov		resABC, eax
 000002AF  A1 000001EF R		mov		eax, resABC
 000002B4  E8 00000000 E		call	WriteInt
 000002B9  E8 00000000 E		call	CrLf

				; Sub numB numA and store result in resBMinA and Display		; B - A
 000002BE  A1 000001CF R		mov		eax, numB
 000002C3  E8 00000000 E		call	WriteInt
 000002C8  BA 000001B6 R		mov		edx, OFFSET subSym
 000002CD  E8 00000000 E		call	WriteString
 000002D2  A1 000001CB R		mov		eax, numA
 000002D7  E8 00000000 E		call	WriteInt
 000002DC  BA 000001BA R		mov		edx, OFFSET eqlSym
 000002E1  E8 00000000 E		call	WriteString
 000002E6  A1 000001CF R		mov		eax, numB
 000002EB  2B 05 000001CB R		sub		eax, numA
 000002F1  A3 000001F3 R		mov		resBMinA, eax
 000002F6  A1 000001F3 R		mov		eax, resBMinA
 000002FB  E8 00000000 E		call	WriteInt
 00000300  E8 00000000 E		call	CrLf

				; Sub numC numA and store result in resCMinA and Display		; C - A
 00000305  A1 000001D3 R		mov		eax, numC
 0000030A  E8 00000000 E		call	WriteInt
 0000030F  BA 000001B6 R		mov		edx, OFFSET subSym
 00000314  E8 00000000 E		call	WriteString
 00000319  A1 000001CB R		mov		eax, numA
 0000031E  E8 00000000 E		call	WriteInt
 00000323  BA 000001BA R		mov		edx, OFFSET eqlSym
 00000328  E8 00000000 E		call	WriteString
 0000032D  A1 000001D3 R		mov		eax, numC
 00000332  2B 05 000001CB R		sub		eax, numA
 00000338  A3 000001F7 R		mov		resCMinA, eax
 0000033D  A1 000001F7 R		mov		eax, resCMinA
 00000342  E8 00000000 E		call	WriteInt
 00000347  E8 00000000 E		call	CrLf

				; Sub numC numB and store result in resCMinB and Display		; C - B
 0000034C  A1 000001D3 R		mov		eax, numC
 00000351  E8 00000000 E		call	WriteInt
 00000356  BA 000001B6 R		mov		edx, OFFSET subSym
 0000035B  E8 00000000 E		call	WriteString
 00000360  A1 000001CF R		mov		eax, numB
 00000365  E8 00000000 E		call	WriteInt
 0000036A  BA 000001BA R		mov		edx, OFFSET eqlSym
 0000036F  E8 00000000 E		call	WriteString
 00000374  A1 000001D3 R		mov		eax, numC
 00000379  2B 05 000001CF R		sub		eax, numB
 0000037F  A3 000001FB R		mov		resCMinB, eax
 00000384  A1 000001FB R		mov		eax, resCMinB
 00000389  E8 00000000 E		call	WriteInt
 0000038E  E8 00000000 E		call	CrLf

				; Sub numC resBMinA and store result in resCBA and Display		; C - B - A
 00000393  A1 000001D3 R		mov		eax, numC
 00000398  E8 00000000 E		call	WriteInt
 0000039D  BA 000001B6 R		mov		edx, OFFSET subSym
 000003A2  E8 00000000 E		call	WriteString
 000003A7  A1 000001CF R		mov		eax, numB
 000003AC  E8 00000000 E		call	WriteInt
 000003B1  BA 000001B6 R		mov		edx, OFFSET subSym
 000003B6  E8 00000000 E		call	WriteString
 000003BB  A1 000001CB R		mov		eax, numA
 000003C0  E8 00000000 E		call	WriteInt
 000003C5  BA 000001BA R		mov		edx, OFFSET eqlSym
 000003CA  E8 00000000 E		call	WriteString
 000003CF  A1 000001FB R		mov		eax, resCMinB
 000003D4  2B 05 000001CB R		sub		eax, numA
 000003DA  A3 000001FF R		mov		resCBA, eax
 000003DF  A1 000001FF R		mov		eax, resCBA
 000003E4  E8 00000000 E		call	WriteInt
 000003E9  E8 00000000 E		call	CrLf

				; Prompt the user to press 1 to quit or 2 to restart			; Quit JMP To: line-313 or Restart JMP To: line-79
 000003EE  E8 00000000 E		call	CrLf
 000003F3  BA 0000018E R		mov		edx, OFFSET	quitPrompt
 000003F8  E8 00000000 E		call	WriteString
 000003FD  E8 00000000 E		call	CrLf
 00000402  E8 00000000 E		call	ReadInt
 00000407  83 F8 01			cmp		eax, 1
 0000040A  74 05			je		CONTINUE
 0000040C  E9 FFFFFC49			jmp		START_LOOP
					

 00000411			CONTINUE:														; JMP From: line-309 to finish

				; Say "Good-bye"												; Print the final message when 1 entered
 00000411  E8 00000000 E		call	CrLf
 00000416  BA 000001BE R		mov		edx, OFFSET goodBye
 0000041B  E8 00000000 E		call	WriteString
 00000420  E8 00000000 E		call	CrLf
					exit														; Exit to operating system
 00000425  6A 00	   *	    push   +000000000h
 00000427  E8 00000000 E   *	    call   ExitProcess

 0000042C			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.24.28314.0	    01/19/20 16:24:37
/Program 1                 Program1_wrighada.as		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000203 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000042C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000042C Public STDCALL
  START_LOOP . . . . . . . . . .	L Near	 0000005A _TEXT	
  INPUT_ERROR  . . . . . . . . .	L Near	 000000BC _TEXT	
  MATH . . . . . . . . . . . . .	L Near	 000000CD _TEXT	
  CONTINUE . . . . . . . . . . .	L Near	 00000411 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addSym . . . . . . . . . . . . .	Byte	 000001B2 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
eqlSym . . . . . . . . . . . . .	Byte	 000001BA _DATA	
errPrompt  . . . . . . . . . . .	Byte	 0000015F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extCred1 . . . . . . . . . . . .	Byte	 00000033 _DATA	
extCred2 . . . . . . . . . . . .	Byte	 0000006A _DATA	
extCred3 . . . . . . . . . . . .	Byte	 000000A7 _DATA	
firPrompt  . . . . . . . . . . .	Byte	 00000131 _DATA	
goodBye  . . . . . . . . . . . .	Byte	 000001BE _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instrctMsg . . . . . . . . . . .	Byte	 000000EA _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numA . . . . . . . . . . . . . .	DWord	 000001CB _DATA	
numB . . . . . . . . . . . . . .	DWord	 000001CF _DATA	
numC . . . . . . . . . . . . . .	DWord	 000001D3 _DATA	
quitPrompt . . . . . . . . . . .	Byte	 0000018E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resABC . . . . . . . . . . . . .	DWord	 000001EF _DATA	
resAMinB . . . . . . . . . . . .	DWord	 000001DB _DATA	
resAMinC . . . . . . . . . . . .	DWord	 000001E3 _DATA	
resAPlusB  . . . . . . . . . . .	DWord	 000001D7 _DATA	
resAPlusC  . . . . . . . . . . .	DWord	 000001DF _DATA	
resBMinA . . . . . . . . . . . .	DWord	 000001F3 _DATA	
resBMinC . . . . . . . . . . . .	DWord	 000001EB _DATA	
resBPlusC  . . . . . . . . . . .	DWord	 000001E7 _DATA	
resCBA . . . . . . . . . . . . .	DWord	 000001FF _DATA	
resCMinA . . . . . . . . . . . .	DWord	 000001F7 _DATA	
resCMinB . . . . . . . . . . . .	DWord	 000001FB _DATA	
secPrompt  . . . . . . . . . . .	Byte	 00000140 _DATA	
subSym . . . . . . . . . . . . .	Byte	 000001B6 _DATA	
thrdPrompt . . . . . . . . . . .	Byte	 00000150 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
