Microsoft (R) Macro Assembler Version 14.24.28315.0	    02/05/20 14:54:03
/Program 3                 Program3_wrighada.as		     Page 1 - 1


				TITLE Program 3                 Program3_wrighada.asm

				; Author:						Adam Wright
				; Last Modified:				2-5-2020
				; OSU email address:			wrighada@oregonstate.edu
				; Course number/section:		cs271-400
				; Project Number:               3  
				; Due Date:						2-9-2020
				; Description:					Assembly program which prompts the user to enter
				;								numbers repeatedly within the ranges of 
				;								[-88, -55] or [-40, -1], and then terminates on
				;								a positive number and then displays the average
				;								rounded to the nearest integer, sum, and lowest
				;								and highest values.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; Constant definitions

 =-00000058			LIMIT_NEG_88 = -88																	; Constant holding the lowest possbie value for input
 =-00000037			LIMIT_NEG_55 = -55																	; Constant holding the highest possible value for lower range
 =-00000028			LIMIT_NEG_40 = -40																	; Constant holding the lowest possible value for higher range
 =-00000001			LIMIT_NEG_1 = -1																	; Constant holding the highest possible value for input


				; Variable definitions

 00000000			.data
 00000000 50 72 6F 67 72	intro		BYTE	"Program-3 -- Average of negative numbers", 0
	   61 6D 2D 33 20
	   2D 2D 20 41 76
	   65 72 61 67 65
	   20 6F 66 20 6E
	   65 67 61 74 69
	   76 65 20 6E 75
	   6D 62 65 72 73
	   00
 00000029 50 72 6F 67 72	programmer	BYTE	"Programmed by Adam Wright", 0
	   61 6D 6D 65 64
	   20 62 79 20 41
	   64 61 6D 20 57
	   72 69 67 68 74
	   00
 00000043 2A 2A 45 43 2D	extCred1	BYTE	"**EC-1: Number the lines during user input.", 0
	   31 3A 20 4E 75
	   6D 62 65 72 20
	   74 68 65 20 6C
	   69 6E 65 73 20
	   64 75 72 69 6E
	   67 20 75 73 65
	   72 20 69 6E 70
	   75 74 2E 00
 0000006F 57 68 61 74 27	userPrompt	BYTE	"What's your name? ", 0
	   73 20 79 6F 75
	   72 20 6E 61 6D
	   65 3F 20 00
 00000082 48 65 6C 6C 6F	userGreet	BYTE	"Hello, ", 0
	   2C 20 00
 0000008A 50 6C 65 61 73	instr1		BYTE	"Please enter numbers in [-88, -55] or [-40, -1].", 0
	   65 20 65 6E 74
	   65 72 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 5B
	   2D 38 38 2C 20
	   2D 35 35 5D 20
	   6F 72 20 5B 2D
	   34 30 2C 20 2D
	   31 5D 2E 00
 000000BB 45 6E 74 65 72	instr2		BYTE	"Enter a non-negative number ", 0
	   20 61 20 6E 6F
	   6E 2D 6E 65 67
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 20 00
 000000D8 77 68 65 6E 20	instr3		BYTE	"when you are finished to see results.", 0
	   79 6F 75 20 61
	   72 65 20 66 69
	   6E 69 73 68 65
	   64 20 74 6F 20
	   73 65 65 20 72
	   65 73 75 6C 74
	   73 2E 00
 000000FE 20 2D 20 45 6E	numPrompt	BYTE	" - Enter a number: ", 0
	   74 65 72 20 61
	   20 6E 75 6D 62
	   65 72 3A 20 00
 00000112 4E 75 6D 62 65	errPrompt	BYTE	"Number Invalid!", 0
	   72 20 49 6E 76
	   61 6C 69 64 21
	   00
 00000122 4E 6F 20 6E 75	noPrompt	BYTE	"No numbers entered!", 0
	   6D 62 65 72 73
	   20 65 6E 74 65
	   72 65 64 21 00
 00000136 59 6F 75 20 65	validPmt1	BYTE	"You entered ", 0
	   6E 74 65 72 65
	   64 20 00
 00000143 20 76 61 6C 69	validPmt2	BYTE	" valid numbers.", 0
	   64 20 6E 75 6D
	   62 65 72 73 2E
	   00
 00000153 54 68 65 20 6D	maxPrompt	BYTE	"The maximum valid number is ", 0
	   61 78 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 20 00
 00000170 54 68 65 20 6D	minPrompt	BYTE	"The minimum valid number is ", 0
	   69 6E 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 20 00
 0000018D 54 68 65 20 73	sumPrompt	BYTE	"The sum of your valid numbers is ", 0
	   75 6D 20 6F 66
	   20 79 6F 75 72
	   20 76 61 6C 69
	   64 20 6E 75 6D
	   62 65 72 73 20
	   69 73 20 00
 000001AF 54 68 65 20 72	avgPrompt	BYTE	"The rounded average is ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 20 00
 000001C7 50 72 65 73 73	quitPrompt	BYTE	"Press 1 to quit and 2 to continue: ", 0
	   20 31 20 74 6F
	   20 71 75 69 74
	   20 61 6E 64 20
	   32 20 74 6F 20
	   63 6F 6E 74 69
	   6E 75 65 3A 20
	   00
 000001EB 21 00			bangSym		BYTE	"!", 0
 000001ED 20 00			space		BYTE	" ", 0
 000001EF 52 65 73 75 6C	byePrompt1	BYTE	"Results certified by Adam Wright.", 0
	   74 73 20 63 65
	   72 74 69 66 69
	   65 64 20 62 79
	   20 41 64 61 6D
	   20 57 72 69 67
	   68 74 2E 00
 00000211 47 6F 6F 64 2D	byePrompt2	BYTE	"Good-bye, ", 0
	   62 79 65 2C 20
	   00
 0000021C  00000021 [		userName	BYTE	33 DUP(0)														; String variable holding user name 33 bytes initialized to 0
	    00
	   ]
 0000023D 00000000		numInput	SDWORD	?																; Signed integer holding the current input number
 00000241 00000000		validCount	DWORD	0																; Integer holding the number of valid inputs
 00000245 FFFFFFFF		numLowest	SDWORD	-1																; Signed integer holding the lowest number entered - initialized to most opposite value
 00000249 FFFFFFA8		numHighest	SDWORD	-88																; Signed integer holding the highest number entered - initialized to most opposite value
 0000024D 00000000		numSum		SDWORD	0																; Signed integer holding the sum of the entered numbers
 00000251 00000000		numAvg		SDWORD	0																; Signed integer holding the average of the entered numbers


				; Executable instructions

 00000000			.code  
 00000000			main PROC

				; Introduce title, programmer, and extra credit options
 00000000  E8 00000000 E		call	CrLf
 00000005  BA 00000000 R		mov		edx, OFFSET intro
 0000000A  E8 00000000 E		call	WriteString
 0000000F  E8 00000000 E		call	CrLf
 00000014  BA 00000029 R		mov		edx, OFFSET programmer
 00000019  E8 00000000 E		call	WriteString
 0000001E  E8 00000000 E		call	CrLf
 00000023  E8 00000000 E		call	CrLf
 00000028  BA 00000043 R		mov		edx, OFFSET extCred1
 0000002D  E8 00000000 E		call	WriteString
 00000032  E8 00000000 E		call	CrLf
 00000037  E8 00000000 E		call	CrLf

				; Prompt for the user's name
 0000003C  BA 0000006F R		mov		edx, OFFSET userPrompt
 00000041  E8 00000000 E		call	WriteString
 00000046  BA 0000021C R		mov		edx, OFFSET userName
 0000004B  B9 00000020			mov		ecx, 32
 00000050  E8 00000000 E		call	ReadString

				; Greet the user using userName
 00000055  BA 00000082 R		mov		edx, OFFSET userGreet
 0000005A  E8 00000000 E		call	WriteString
 0000005F  BA 0000021C R		mov		edx, OFFSET userName
 00000064  E8 00000000 E		call	WriteString
 00000069  BA 000001EB R		mov		edx, OFFSET	bangSym
 0000006E  E8 00000000 E		call	WriteString
 00000073  E8 00000000 E		call	CrLf
 00000078  E8 00000000 E		call	CrLf

				; Print the instructions
 0000007D  BA 0000008A R		mov		edx, OFFSET instr1
 00000082  E8 00000000 E		call	WriteString
 00000087  E8 00000000 E		call	CrLf
 0000008C  BA 000000BB R		mov		edx, OFFSET instr2
 00000091  E8 00000000 E		call	WriteString
 00000096  BA 000000D8 R		mov		edx, OFFSET instr3
 0000009B  E8 00000000 E		call	WriteString
 000000A0  E8 00000000 E		call	CrLf


 000000A5			MAIN_LOOP:														; User can press 2 and continue with JMP From: line-295

				; Prompt for a number from user
 000000A5  E8 00000000 E		call	CrLf
 000000AA  A1 00000241 R		mov		eax, validCount
 000000AF  E8 00000000 E		call	WriteDec
 000000B4  BA 000000FE R		mov		edx, OFFSET numPrompt
 000000B9  E8 00000000 E		call	WriteString
 000000BE  E8 00000000 E		call	ReadInt
 000000C3  A3 0000023D R		mov		numInput, eax
 000000C8  0F 89 000000AA		jns		NO_PRINT											; Detect lack of negative Flag (Positive Int) JMP To: line-225

				; Error test for int between [-88, -55] or [-40, -1]			; Success JMP To: line-162 or Fail JMP To: line-152
 000000CE  A1 0000023D R		mov		eax, numInput
 000000D3  83 F8 A8			cmp		eax, LIMIT_NEG_88
 000000D6  7C 29			jl		INPUT_ERROR
 000000D8  83 F8 FF			cmp		eax, LIMIT_NEG_1
 000000DB  7F 24			jg		INPUT_ERROR
 000000DD  83 F8 D8			cmp		eax, LIMIT_NEG_40
 000000E0  7C 07			jl		LOWER_RANGE_TEST
 000000E2  83 F8 C9			cmp		eax, LIMIT_NEG_55
 000000E5  7F 0E			jg		HIGHER_RANGE_TEST
 000000E7  EB 2E			jmp		MATH


 000000E9			LOWER_RANGE_TEST:

				; Second test to invalidate (-56 -> -41)
 000000E9  A1 0000023D R		mov		eax, numInput
 000000EE  83 F8 C9			cmp		eax, LIMIT_NEG_55
 000000F1  7F 0E			jg		INPUT_ERROR
 000000F3  EB 22			jmp		MATH


 000000F5			HIGHER_RANGE_TEST:

				; Second test to invalidate (-56 -> -41)
 000000F5  A1 0000023D R		mov		eax, numInput
 000000FA  83 F8 D8			cmp		eax, LIMIT_NEG_40
 000000FD  7C 02			jl		INPUT_ERROR
 000000FF  EB 16			jmp		MATH


 00000101			INPUT_ERROR:													; Input numbers not in range JMP From: line-124,126,139,148 

				; Error Message for num outside [-88, -55] or [-40, -1]
 00000101  E8 00000000 E		call	CrLf
 00000106  BA 00000112 R		mov		edx, OFFSET	errPrompt
 0000010B  E8 00000000 E		call	WriteString
 00000110  E8 00000000 E		call	CrLf
 00000115  EB 8E			Jmp		MAIN_LOOP											; After error message JMP To: line-109 to request numbers again


 00000117			MATH:															; JMP From: line-131,140,149 - Input tests pass  ---  Start Math section

				; Increment valid count and create sum
 00000117  FF 05 00000241 R		inc		validCount
 0000011D  A1 0000023D R		mov		eax, numInput
 00000122  03 05 0000024D R		add		eax, numSum
 00000128  A3 0000024D R		mov		numSum, eax

				; Process lowest number
 0000012D  A1 0000023D R		mov		eax, numInput
 00000132  3B 05 00000245 R		cmp		eax, numLowest
 00000138  7C 28			jl		MIN_NUM												; New min detected JMP To: line-204


 0000013A			MATH_HI_CHK:

				; Process highest number
 0000013A  3B 05 00000249 R		cmp		eax, numHighest
 00000140  7F 27			jg		MAX_NUM												; New max detected JMP To: line-211


 00000142			CONTINUE_MATH:

				; Process the average of the numbers
 00000142  A1 0000024D R		mov		eax, numSum
 00000147  99				cdq
 00000148  8B 1D 00000241 R		mov		ebx, validCount
 0000014E  F7 FB			idiv	ebx
 00000150  A3 00000251 R		mov		numAvg, eax

				; Quotient / 2 and compared to remainder
 00000155  D1 EB			shr		ebx, 1
 00000157  F7 DA			neg		edx
 00000159  3B D3			cmp		edx, ebx
 0000015B  7F 13		 	jg		ROUND_UP											; Remainder > .5 JMP To: line-218


 0000015D			RETURN_ROUND:
				; Current rounded avg created
 0000015D  E9 FFFFFF43			jmp		MAIN_LOOP											; Request the next number JMP To: line-109


 00000162			MIN_NUM:

				; Swap current number to lowest entered value
 00000162  A3 00000245 R		mov		numLowest, eax
 00000167  EB D1			jmp		MATH_HI_CHK											; Return to processing JMP To: line-176


 00000169			MAX_NUM:

				; Swap current number to highest entered value
 00000169  A3 00000249 R		mov		numHighest, eax
 0000016E  EB D2			jmp		CONTINUE_MATH										; Return to processing JMP To: line-183


 00000170			ROUND_UP:

				; Round up > 0.5 remainder
 00000170  FF 0D 00000251 R		dec		numAvg
 00000176  EB E5			jmp		RETURN_ROUND


 00000178			NO_PRINT:														; Test for any valid entries JMP From: line-119

				; If end before any entries
 00000178  A1 00000241 R		mov		eax, validCount 
 0000017D  83 F8 00			cmp		eax, 0
 00000180  7F 19			jg		PRINT												; Valid entries JMP To: line-233
 00000182  E8 00000000 E		call	CrLf
 00000187  BA 00000122 R		mov		edx, OFFSET noPrompt
 0000018C  E8 00000000 E		call	WriteString
 00000191  E8 00000000 E		call	CrLf
 00000196  E9 0000008C			jmp		QUIT												; No valid input JMP To: line-274


 0000019B			PRINT: 

				; Print the number of valid numbers
 0000019B  E8 00000000 E		call	CrLf
 000001A0  BA 00000136 R		mov		edx, OFFSET validPmt1
 000001A5  E8 00000000 E		call	WriteString
 000001AA  A1 00000241 R		mov		eax, validCount
 000001AF  E8 00000000 E		call	WriteDec
 000001B4  BA 00000143 R		mov		edx, OFFSET validPmt2
 000001B9  E8 00000000 E		call	WriteString

				; Print the lowest number
 000001BE  E8 00000000 E		call	CrLf
 000001C3  BA 00000170 R		mov		edx, OFFSET minPrompt
 000001C8  E8 00000000 E		call	WriteString
 000001CD  A1 00000245 R		mov		eax, numLowest
 000001D2  E8 00000000 E		call	WriteInt

				; Print the highest number
 000001D7  E8 00000000 E		call	CrLf
 000001DC  BA 00000153 R		mov		edx, OFFSET maxPrompt
 000001E1  E8 00000000 E		call	WriteString
 000001E6  A1 00000249 R		mov		eax, numHighest
 000001EB  E8 00000000 E		call	WriteInt

				; Print the sum valid numbers
 000001F0  E8 00000000 E		call	CrLf
 000001F5  BA 0000018D R		mov		edx, OFFSET sumPrompt
 000001FA  E8 00000000 E		call	WriteString
 000001FF  A1 0000024D R		mov		eax, numSum
 00000204  E8 00000000 E		call	WriteInt

				; Print the average of numbers
 00000209  E8 00000000 E		call	CrLf
 0000020E  BA 000001AF R		mov		edx, OFFSET avgPrompt
 00000213  E8 00000000 E		call	WriteString
 00000218  A1 00000251 R		mov		eax, numAvg
 0000021D  E8 00000000 E		call	WriteInt
 00000222  E8 00000000 E		call	CrLf


 00000227			QUIT:

				; Prompt the user to press 1 to quit or 2 to restart			; Quit JMP To: line-293 or Restart JMP To: line-109
 00000227  E8 00000000 E		call	CrLf
 0000022C  BA 000001C7 R		mov		edx, OFFSET	quitPrompt
 00000231  E8 00000000 E		call	WriteString
 00000236  E8 00000000 E		call	ReadInt
 0000023B  83 F8 01			cmp		eax, 1
 0000023E  74 37			je		FINISH

				; If restarting then variables are reset
 00000240  C7 05 00000241 R		mov		validCount, 0
	   00000000
 0000024A  C7 05 0000024D R		mov		numSum, 0
	   00000000
 00000254  C7 05 00000251 R		mov		numAvg, 0
	   00000000
 0000025E  C7 05 00000245 R		mov		numLowest, LIMIT_NEG_1
	   FFFFFFFF
 00000268  C7 05 00000249 R		mov		numHighest, LIMIT_NEG_88
	   FFFFFFA8
 00000272  E9 FFFFFE2E			jmp		MAIN_LOOP
					

 00000277			FINISH:															; JMP From: line-283 to finish

				; Say "Good-bye"												; Print the final message when 1 entered
 00000277  E8 00000000 E		call	CrLf
 0000027C  BA 000001EF R		mov		edx, OFFSET byePrompt1
 00000281  E8 00000000 E		call	WriteString
 00000286  E8 00000000 E		call	CrLf
 0000028B  BA 00000211 R		mov		edx, OFFSET byePrompt2
 00000290  E8 00000000 E		call	WriteString
 00000295  BA 0000021C R		mov		edx, OFFSET userName
 0000029A  E8 00000000 E		call	WriteString
 0000029F  BA 000001EB R		mov		edx, OFFSET	bangSym
 000002A4  E8 00000000 E		call	WriteString
 000002A9  E8 00000000 E		call	CrLf
					exit														; Exit to operating system
 000002AE  6A 00	   *	    push   +000000000h
 000002B0  E8 00000000 E   *	    call   ExitProcess

 000002B5			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.24.28315.0	    02/05/20 14:54:03
/Program 3                 Program3_wrighada.as		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000255 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002B5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002B5 Public STDCALL
  MAIN_LOOP  . . . . . . . . . .	L Near	 000000A5 _TEXT	
  LOWER_RANGE_TEST . . . . . . .	L Near	 000000E9 _TEXT	
  HIGHER_RANGE_TEST  . . . . . .	L Near	 000000F5 _TEXT	
  INPUT_ERROR  . . . . . . . . .	L Near	 00000101 _TEXT	
  MATH . . . . . . . . . . . . .	L Near	 00000117 _TEXT	
  MATH_HI_CHK  . . . . . . . . .	L Near	 0000013A _TEXT	
  CONTINUE_MATH  . . . . . . . .	L Near	 00000142 _TEXT	
  RETURN_ROUND . . . . . . . . .	L Near	 0000015D _TEXT	
  MIN_NUM  . . . . . . . . . . .	L Near	 00000162 _TEXT	
  MAX_NUM  . . . . . . . . . . .	L Near	 00000169 _TEXT	
  ROUND_UP . . . . . . . . . . .	L Near	 00000170 _TEXT	
  NO_PRINT . . . . . . . . . . .	L Near	 00000178 _TEXT	
  PRINT  . . . . . . . . . . . .	L Near	 0000019B _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 00000227 _TEXT	
  FINISH . . . . . . . . . . . .	L Near	 00000277 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LIMIT_NEG_1  . . . . . . . . . .	Number	 -00000001h   
LIMIT_NEG_40 . . . . . . . . . .	Number	 -00000028h   
LIMIT_NEG_55 . . . . . . . . . .	Number	 -00000037h   
LIMIT_NEG_88 . . . . . . . . . .	Number	 -00000058h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgPrompt  . . . . . . . . . . .	Byte	 000001AF _DATA	
bangSym  . . . . . . . . . . . .	Byte	 000001EB _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byePrompt1 . . . . . . . . . . .	Byte	 000001EF _DATA	
byePrompt2 . . . . . . . . . . .	Byte	 00000211 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errPrompt  . . . . . . . . . . .	Byte	 00000112 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extCred1 . . . . . . . . . . . .	Byte	 00000043 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instr1 . . . . . . . . . . . . .	Byte	 0000008A _DATA	
instr2 . . . . . . . . . . . . .	Byte	 000000BB _DATA	
instr3 . . . . . . . . . . . . .	Byte	 000000D8 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxPrompt  . . . . . . . . . . .	Byte	 00000153 _DATA	
minPrompt  . . . . . . . . . . .	Byte	 00000170 _DATA	
noPrompt . . . . . . . . . . . .	Byte	 00000122 _DATA	
numAvg . . . . . . . . . . . . .	DWord	 00000251 _DATA	
numHighest . . . . . . . . . . .	DWord	 00000249 _DATA	
numInput . . . . . . . . . . . .	DWord	 0000023D _DATA	
numLowest  . . . . . . . . . . .	DWord	 00000245 _DATA	
numPrompt  . . . . . . . . . . .	Byte	 000000FE _DATA	
numSum . . . . . . . . . . . . .	DWord	 0000024D _DATA	
programmer . . . . . . . . . . .	Byte	 00000029 _DATA	
quitPrompt . . . . . . . . . . .	Byte	 000001C7 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 000001ED _DATA	
sumPrompt  . . . . . . . . . . .	Byte	 0000018D _DATA	
userGreet  . . . . . . . . . . .	Byte	 00000082 _DATA	
userName . . . . . . . . . . . .	Byte	 0000021C _DATA	
userPrompt . . . . . . . . . . .	Byte	 0000006F _DATA	
validCount . . . . . . . . . . .	DWord	 00000241 _DATA	
validPmt1  . . . . . . . . . . .	Byte	 00000136 _DATA	
validPmt2  . . . . . . . . . . .	Byte	 00000143 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
