Microsoft (R) Macro Assembler Version 14.24.28315.0	    02/23/20 18:43:24
/Program 5                 Program5_wrighada.as		     Page 1 - 1


				TITLE Program 5                 Program5_wrighada.asm

				; Author:						Adam Wright
				; Last Modified:				2-23-2020
				; OSU email address:			wrighada@oregonstate.edu
				; Course number/section:		cs271-400
				; Project Number:               5  
				; Due Date:						3-1-2020
				; Description:					Assembly program which creates an array of 
				;								200 random numbers between 10 - 29 and then
				;								prints the array. Then, it sorts the array,
				;								it calculates and prints the median value, 
				;								it prints the sorted array, it calculates
				;								the occurance of the 20 numbers in the array,
				;								and it prints the array of number counts.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				;  -------------------------------------------------------------------------------  ; CONSTANT DEFINITIONS

 = 000000C8			ARRAY_SIZE = 200																	; Constant holding the highest possible value for input
 = 0000000A			RANGE_LO = 10																		; Constant holding the lowest possible random num in array
 = 0000001D			RANGE_HI = 29																		; Constant holding the highest possible random num in array
 = 00000014			COUNT_LIST_SIZE = 20																; Constant holding the size of the occurance list

 = [ebp + 8]			PARAM_1 EQU [ebp + 8]																; Explicit stack offset for parameter 1
 = [ebp + 12]			PARAM_2 EQU [ebp + 12]																; Explicit stack offset for parameter 2
 = [ebp + 16]			PARAM_3 EQU [ebp + 16]																; Explicit stack offset for parameter 3
 = [ebp + 20]			PARAM_4 EQU [ebp + 20]																; Explicit stack offset for parameter 4


				;  -------------------------------------------------------------------------------  ; VARIABLE DEFINITIONS

 00000000			.data																				
 00000000 2A 2A 20 50 72	intro		BYTE	"** Program-5 -- Array Sorting **", 0
	   6F 67 72 61 6D
	   2D 35 20 2D 2D
	   20 41 72 72 61
	   79 20 53 6F 72
	   74 69 6E 67 20
	   2A 2A 00
 00000021 2A 2A 20 50 72	programmer	BYTE	"** Programmed by Adam Wright  **", 0
	   6F 67 72 61 6D
	   6D 65 64 20 62
	   79 20 41 64 61
	   6D 20 57 72 69
	   67 68 74 20 20
	   2A 2A 00
 00000042 54 68 69 73 20	instruct	BYTE	"This program generates 200 random numbers in the range "
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 20 69 6E 20
	   74 68 65 20 72
	   61 6E 67 65 20
 00000079  5B 31 30 20 2E				BYTE	"[10 ... 29], displays the original list, ", 0dh, 0ah
	   2E 2E 20 32 39
	   5D 2C 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6F 72 69 67
	   69 6E 61 6C 20
	   6C 69 73 74 2C
	   20 0D 0A
 000000A4  73 6F 72 74 73				BYTE	"sorts the list, displays the median value, displays "
	   20 74 68 65 20
	   6C 69 73 74 2C
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6D
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 2C 20 64 69
	   73 70 6C 61 79
	   73 20
 000000D8  74 68 65 20 6C				BYTE	"the list sorted in ascending order, then ", 0dh, 0ah
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 61
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 2C
	   20 74 68 65 6E
	   20 0D 0A
 00000103  64 69 73 70 6C				BYTE	"displays the number of instances of each generated "
	   61 79 73 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20
 00000136  76 61 6C 75 65				BYTE	"value.", 0
	   2E 00
 0000013D 59 6F 75 72 20	unsortMsg	BYTE	"Your unsorted random numbers:", 0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 00
 0000015B 4C 69 73 74 20	medianMsg	BYTE	"List Median: ", 0
	   4D 65 64 69 61
	   6E 3A 20 00
 00000169 59 6F 75 72 20	sortMsg		BYTE	"Your sorted random numbers:", 0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 00
 00000185 59 6F 75 72 20	listMsg		BYTE	"Your list of instances of each generated number, "
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20
 000001B6  73 74 61 72 74				BYTE	"starting with the number of 10s:", 0
	   69 6E 67 20 77
	   69 74 68 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 31 30
	   73 3A 00
 000001D7 50 72 65 73 73	quitPrompt	BYTE	"Press 1 to quit and 2 to continue: ", 0
	   20 31 20 74 6F
	   20 71 75 69 74
	   20 61 6E 64 20
	   32 20 74 6F 20
	   63 6F 6E 74 69
	   6E 75 65 3A 20
	   00
 000001FB 47 6F 6F 64 2D	byePrompt	BYTE	"Good-bye, and thanks for using my program!", 0
	   62 79 65 2C 20
	   61 6E 64 20 74
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   75 73 69 6E 67
	   20 6D 79 20 70
	   72 6F 67 72 61
	   6D 21 00
 00000226  000000C8 [		array		DWORD	ARRAY_SIZE DUP(?)												; Empty array of DWORDS to hold the number array
	    00000000
	   ]
 00000546  00000014 [		numCounts	DWORD	20 DUP(?)														; Empty array
	    00000000
	   ]
 00000596 00000001		quitVal		DWORD	1																; Integer holding 1 to quit or any other value to continue


				;  -------------------------------------------------------------------------------  ; EXECUTABLE INSTRUCTIONS

 00000000			.code
 00000000			main PROC

				; Seed the Irvine library random function
 00000000  E8 00000000 E		call	Randomize

				; Introduce title, programmer, and instructions
 00000005  68 00000042 R		push	OFFSET instruct
 0000000A  68 00000021 R		push	OFFSET programmer
 0000000F  68 00000000 R		push	OFFSET intro
 00000014  E8 000000B2			call	introduction

 00000019			MAIN_LOOP:																			; Restart (quitVal == 1) JMP From: line-123

				; Fill the array with random numbers between 10-29
 00000019  68 000000C8			push	ARRAY_SIZE
 0000001E  6A 1D			push	RANGE_HI
 00000020  6A 0A			push	RANGE_LO
 00000022  68 00000226 R		push	OFFSET array
 00000027  E8 000000D5			call	fillArray

				; Print the unsorted array
 0000002C  68 0000013D R		push	OFFSET unsortMsg
 00000031  68 000000C8			push	ARRAY_SIZE
 00000036  68 00000226 R		push	OFFSET array
 0000003B  E8 000000E2			call	displayList

				; Sort the array from low to high
 00000040  68 000000C8			push	ARRAY_SIZE
 00000045  68 00000226 R		push	OFFSET array
 0000004A  E8 00000126			call	sortList

				; Calculate and print the median value
 0000004F  68 0000015B R		push	OFFSET medianMsg
 00000054  68 000000C8			push	ARRAY_SIZE
 00000059  68 00000226 R		push	OFFSET array
 0000005E  E8 00000155			call	displayMedian

				; Print the sorted array
 00000063  68 00000169 R		push	OFFSET sortMsg
 00000068  68 000000C8			push	ARRAY_SIZE
 0000006D  68 00000226 R		push	OFFSET array
 00000072  E8 000000AB			call	displayList

				; Calculate number occurances 10-19
 00000077  6A 0A			push	RANGE_LO
 00000079  68 00000546 R		push	OFFSET numCounts
 0000007E  68 000000C8			push	ARRAY_SIZE
 00000083  68 00000226 R		push	OFFSET array
 00000088  E8 0000016D			call	countList

				; Print the number counts 10-29
 0000008D  68 00000185 R		push	OFFSET listMsg
 00000092  6A 14			push	COUNT_LIST_SIZE
 00000094  68 00000546 R		push	OFFSET numCounts
 00000099  E8 00000084			call	displayList

				; Ask if the user wants to quit
 0000009E  68 000001D7 R		push	OFFSET quitPrompt
 000000A3  E8 00000188			call	quit																	; Returns quitVal bool in eax
 000000A8  A3 00000596 R		mov		quitVal, eax

				; Check the value set in the quit procedure
 000000AD  83 3D 00000596 R		cmp		quitVal, 1
	   01
 000000B4  0F 85 FFFFFF5F		jne		MAIN_LOOP																; Enter 1 to reset JMP To: line-71

				; Function that says "Good-bye"
 000000BA  68 000001FB R		push	OFFSET byePrompt
 000000BF  E8 0000017E			call	farewell

				; Exit to operating system
					exit							
 000000C4  6A 00	   *	    push   +000000000h
 000000C6  E8 00000000 E   *	    call   ExitProcess

 000000CB			main ENDP


				;  -------------------------------------------------------------------------------  ; PROCEDURE DEFINITIONS

				;------------------------------------------------------------------------------
				; introduction
				;
				; Description:       Prints the Introductory message
				; Pre-conditions:	 4 string pointers pushed onto stack
				; Post-conditions:	 none
				; Parameters:		 PARAM_1: OFFSET intro, PARAM_2: OFFSET programmer
				;					 PARAM_3: OFFSET instruct
				; Registers changed: edx
				;------------------------------------------------------------------------------

 000000CB			introduction PROC

				; Print the title message
 000000CB  55				push	ebp
 000000CC  8B EC			mov		ebp, esp
 000000CE  E8 00000000 E		call	CrLf
 000000D3  8B 55 08			mov		edx, PARAM_1
 000000D6  E8 00000000 E		call	WriteString

				; Print the programmer message
 000000DB  E8 00000000 E		call	CrLf
 000000E0  8B 55 0C			mov		edx, PARAM_2
 000000E3  E8 00000000 E		call	WriteString

				; Print the instructions and finish
 000000E8  E8 00000000 E		call	CrLf
 000000ED  E8 00000000 E		call	CrLf
 000000F2  8B 55 10			mov		edx, PARAM_3
 000000F5  E8 00000000 E		call	WriteString
 000000FA  E8 00000000 E		call	CrLf
 000000FF  5D				pop		ebp
 00000100  C3				ret		3 * TYPE PARAM_1

 00000101			introduction ENDP


				;------------------------------------------------------------------------------
				; fillArray
				;
				; Description:       Fill 200 numbers each between 10-29
				; Pre-conditions:	 array, LO range, HI range, and ARRAY_SIZE on stack
				; Post-conditions:	 array filled with 200 values in range 10-29
				; Parameters:		 PARAM_1: OFFSET array, PARAM_2: RANGE_LO (value)
				;					 PARAM_3: RANGE_HI (value) PARAM_4: ARRAY_SIZE (value)
				; Registers changed: eax, ecx, esi
				;------------------------------------------------------------------------------

 00000101			fillArray PROC

				; Set up array filling loop
 00000101  55				push	ebp
 00000102  8B EC			mov		ebp, esp
 00000104  8B 75 08			mov		esi, PARAM_1
 00000107  8B 4D 14			mov		ecx, PARAM_4

 0000010A			ARRAY_FILL:																			; Next number Loop From: line-205

				; Generate number between 10-29
 0000010A  8B 45 10			mov		eax, PARAM_3
 0000010D  2B 45 0C			sub		eax, PARAM_2
 00000110  40				inc		eax
 00000111  E8 00000000 E		call	RandomRange
 00000116  03 45 0C			add		eax, PARAM_2

				; Enter number into array
 00000119  89 06			mov		[esi], eax
 0000011B  83 C6 04			add		esi, TYPE DWORD
 0000011E  E2 EA			loop	ARRAY_FILL																; Loop until 200 JMP To: line-193

				; Exit when array length is reached
 00000120  5D				pop		ebp
 00000121  C3				ret		4 * TYPE PARAM_1

 00000122			fillArray ENDP


				;------------------------------------------------------------------------------
				; displayList
				;
				; Description:        Print the array 20 numbers per line and two space columns
				; Pre-conditions:	  OFFSET array, ARRAY_SIZE, unsortMsg on stack
				; Post-conditions:	  array printed to console
				; Parameters:		  PARAM_1: OFFSET array, PARAM_2: ARRAY_SIZE 
				;					  PARAM_3: printing message (unsortMsg, sortMsg or listMsg)
				; Registers changed:  eax, ebx, ecx, edx, esi
				;------------------------------------------------------------------------------

 00000122			displayList PROC

				; Set up array pointer and loops
 00000122  55				push	ebp
 00000123  8B EC			mov		ebp, esp
 00000125  8B 75 08			mov		esi, PARAM_1
 00000128  8B 4D 0C			mov		ecx, PARAM_2
 0000012B  BB 00000001			mov		ebx, 1

				; Print the unsortMsg
 00000130  E8 00000000 E		call	CrLf
 00000135  8B 55 10			mov		edx, PARAM_3
 00000138  E8 00000000 E		call	WriteString
 0000013D  E8 00000000 E		call	CrLf

 00000142			PRINT_ARR_1:																		; After number printed JMP From: line-256

				; Print a row of 20 numbers with two white spaces between
 00000142  8B 06			mov		eax, [esi]
 00000144  E8 00000000 E		call	WriteDec
 00000149  B0 20			mov		al, ' '
 0000014B  E8 00000000 E		call	WriteChar
 00000150  E8 00000000 E		call	WriteChar
 00000155  83 FB 14			cmp		ebx, 20
 00000158  74 08			je		PRINT_CRLF																; After 20 numbers in current row JMP To: line-259
 0000015A  43				inc		ebx

 0000015B			PRINT_ARR_2:																		; After newline continue From: line-264

				; Increment counters and check loop counter
 0000015B  83 C6 04			add		esi, TYPE DWORD
 0000015E  E2 E2			loop	PRINT_ARR_1																; After number printed LOOP To: line-240
 00000160  EB 0C			jmp		FINISH_PRINT															; After entire array printed JMP To: line-266

 00000162			PRINT_CRLF:																			; After 20 nums JMP From line-249
				 
				; Add a newline after 20 numbers
 00000162  E8 00000000 E		call	CrLf
 00000167  BB 00000001			mov		ebx, 1
 0000016C  EB ED			jmp		PRINT_ARR_2																; After newline JMP To: line-252

 0000016E			FINISH_PRINT:																		; Printing finished JMP From: line-257

				; Exit after array printed
 0000016E  E8 00000000 E		call	CrLf
 00000173  5D				pop		ebp
 00000174  C3				ret		3 * TYPE PARAM_1

 00000175			displayList ENDP


				;------------------------------------------------------------------------------
				; sortList
				;
				; Description:        Sorts array of DWORD from low to high
				; Pre-conditions:	  OFFSET array and ARRAY_SIZE on stack
				; Post-conditions:	  array sorted from low to high
				; Parameters:		  PARAM_1: OFFSET array, PARAM_2: ARRAY_SIZE
				; Registers changed:  eax, ecx, esi
				;------------------------------------------------------------------------------

 00000175			sortList PROC

				; Set array loop to array address
 00000175  55				push	ebp
 00000176  8B EC			mov		ebp, esp
 00000178  8B 4D 0C			mov		ecx, PARAM_2
 0000017B  49				dec		ecx

 0000017C			OUTER_LOOP:																			; Beginning of array Loop From: line-320 

				; Store ARRAY_SIZE -1 on the stack
 0000017C  51				push	ecx
 0000017D  8B 75 08			mov		esi, PARAM_1

 00000180			INNER_LOOP:																			; Continue iteration Loop From: line-318

				; Compare and swap or branch
 00000180  8B 06			mov		eax, [esi]
 00000182  39 46 04			cmp		[esi + TYPE DWORD], eax
 00000185  7F 0D			jg		INCREMENT																; No swap JMP To: line-314

				; Call swap function
 00000187  83 C6 04			add		esi, TYPE DWORD
 0000018A  56				push	esi
 0000018B  83 EE 04			sub		esi, TYPE DWORD
 0000018E  56				push	esi
 0000018F  E8 0000000A			call	exchangeElements

 00000194			INCREMENT:																			; No swap JMP From: line-305

				; Increment esi and loop and outer
 00000194  83 C6 04			add		esi, TYPE DWORD
 00000197  E2 E7			loop	INNER_LOOP																; Continue sorting pass Loop To: line-300
 00000199  59				pop		ecx
 0000019A  E2 E0			loop	OUTER_LOOP																; Next array pass Loop To: line-294

				; Exit when array is sorted
 0000019C  5D				pop		ebp
 0000019D  C3				ret		2 * TYPE PARAM_1

 0000019E			sortList ENDP


				;------------------------------------------------------------------------------
				; exchangeElements
				;
				; Description:        Swaps two values by reference
				; Pre-conditions:	  Two array addresses pushed onto stack. 2 * TYPE PARAM_1
				;					  not working in return. Alternative must be used!
				; Post-conditions:	  Paramater 1 and 2 are swapped
				; Parameters:		  PARAM_1: index 1, PARAM_2: index 2  
				; Registers changed:  eax, ebx, edx
				;------------------------------------------------------------------------------

 0000019E			exchangeElements PROC

				; Set up the stack frame
 0000019E  55				push	ebp
 0000019F  8B EC			mov		ebp, esp
 000001A1  60				pushad

				; Swap the elements passed by reference
 000001A2  8B 45 08			mov		eax, [PARAM_1]
 000001A5  8B 5D 0C			mov		ebx, [PARAM_2]
 000001A8  8B 10			mov		edx, [eax]
 000001AA  8B 03			mov		eax, [ebx]
 000001AC  8B DA			mov		ebx, edx

				; Insert the swapped numbers
 000001AE  89 06			mov		[esi], eax
 000001B0  89 5E 04			mov		[esi + TYPE DWORD], ebx
					
				; Exit after swap
 000001B3  61				popad
 000001B4  5D				pop		ebp
 000001B5  C2 0008			ret		2 * TYPE DWORD

 000001B8			exchangeElements ENDP


				;------------------------------------------------------------------------------
				; displayMedian
				;
				; Description:        Calculates and prints the median value of the array
				; Pre-conditions:	  curVal contains 4, compCheck contains 0
				; Post-conditions:	  Median printed to console
				; Parameters:		  PARAM_1: OFFSET array, PARAM_2: ARRAY_SIZE (value) 
				;					  PARAM_3: OFFSET medianMsg 
				; Registers changed:  eax, ebx, edx
				;------------------------------------------------------------------------------

 000001B8			displayMedian PROC
 000001B8  55				push	ebp
 000001B9  8B EC			mov		ebp, esp

				; Print the median message
 000001BB  8B 55 10			mov		edx, PARAM_3
 000001BE  E8 00000000 E		call	WriteString

				; Get index of middle elements
 000001C3  BA 00000000			mov		edx, 0
 000001C8  8B 45 0C			mov		eax, [PARAM_2]
 000001CB  BB 00000002			mov		ebx, 2
 000001D0  F7 F3			div		ebx

				; Jump to even or odd calculation
 000001D2  83 FA 00			cmp		edx, 0
 000001D5  75 21			jne		ODD_MEDIAN																; If edx != 0 (Not Possible!) JMP To: line-412

 000001D7			EVEN_MEDIAN:																		; No need to jump, this will always be hit

				; Get middle 2 elements (100 and 99)
 000001D7  8B 45 08			mov		eax, PARAM_1
 000001DA  05 0000018C			add		eax, 99 * TYPE DWORD
 000001DF  8B 18			mov		ebx, [eax]
 000001E1  83 C0 04			add		eax, TYPE DWORD
 000001E4  8B 00			mov		eax, [eax]

				; Calculate the median (.5 rounds up)
 000001E6  03 C3			add		eax, ebx
 000001E8  BB 00000002			mov		ebx, 2
 000001ED  F7 F3			div		ebx
 000001EF  03 C2			add		eax, edx
 000001F1  E8 00000000 E		call	WriteDec
 000001F6  EB 00			jmp		FINISH_MEDIAN															; If odd container were possible, this must be implemented

 000001F8			ODD_MEDIAN:																			; The container is fixed as even, so this won't be reached

 000001F8			FINISH_MEDIAN:																		; Even container size JMP From: line-410

				; Exit after median created
 000001F8  5D				pop		ebp
 000001F9  C3				ret		3 * TYPE PARAM_1

 000001FA			displayMedian ENDP


				;------------------------------------------------------------------------------
				; countList
				;
				; Description:        Counts occurances of each number and prints them
				; Pre-conditions:	  OFFSET array, ARRAY_SIZE, OFFSET numCounts, RANGE_LO
				;					  pushed onto the stack
				; Post-conditions:	  The 20 current number occurances in array stored in numCounts
				; Parameters:		  PARAM_1: OFFSET array, PARAM_2: ARRAY_SIZE (value) 
				;					  PARAM_3: OFFSET numCounts, PARAM_4: RANGE_LO (value)
				; Registers changed:  eax, ebx, ecx, edx, esi, edi
				;------------------------------------------------------------------------------

 000001FA			countList PROC

				; Set up stack frame
 000001FA  55				push	ebp
 000001FB  8B EC			mov		ebp, esp
 000001FD  8B 5D 14			mov		ebx, PARAM_4
 00000200  8B 7D 10			mov		edi, [PARAM_3]

 00000203			START_LOOP:																			; Iterate through array for each num 10-29 LOOP From: line-477

				; Initialize the outer loop
 00000203  8B 75 08			mov		esi, [PARAM_1]
 00000206  8B 4D 0C			mov		ecx, PARAM_2
 00000209  B8 00000000			mov		eax, 0
					
 0000020E			COUNT_LOOP:																			; Array not iterated through yet LOOP From: line-456 or 464

				; Check for number and branch if found
 0000020E  3B 1E			cmp		ebx, [esi]
 00000210  74 07			je		NUM_FOUND																; Searched num found JMP To: line-459
 00000212  83 C6 04			add		esi, TYPE DWORD
 00000215  E2 F7			loop	COUNT_LOOP																; Iterate through entire array LOOP To: line-450
 00000217  EB 08			jmp		NEXT_NUMBER																; Array iterated through JMP To: line-467

 00000219			NUM_FOUND:																			; Searched num found JMP From: line-454

				; Loop through each value and count occurance
 00000219  40				inc		eax
 0000021A  83 C6 04			add		esi, TYPE DWORD
 0000021D  E2 EF			loop	COUNT_LOOP																; Iterate through whole array LOOP To: line-450
 0000021F  EB 00			jmp		NEXT_NUMBER																; Full interation of array JMP To: line-467

 00000221			NEXT_NUMBER:																		; Increment num to check JMP From: line-457 or 465

				; Enter the count into occurance list
 00000221  89 07			mov		[edi], eax
 00000223  83 C7 04			add		edi, TYPE DWORD

				; Increment the number to check for
 00000226  43				inc		ebx
 00000227  83 FB 1E			cmp		ebx, 30
 0000022A  74 02			je		FINISH_COUNT															; After counting 29 JMP To: line-479
 0000022C  EB D5			jmp		START_LOOP																; 29 not yet counted JMP To: line-443

 0000022E			FINISH_COUNT:																		; Count array filled JMP From: line-476

				; Exit after counts created
 0000022E  5D				pop		ebp
 0000022F  C3				ret		4 * TYPE PARAM_1

 00000230			countList ENDP


				;------------------------------------------------------------------------------
				; quit
				;
				; Description:        Prints the quit dialog
				;					  quitVal == 1 to quit or any other value to continue
				; Pre-conditions:	  quitPrompt pushed onto stack
				; Post-conditions:	  quitVal stored in eax upon return
				; Parameters:		  PARAM_1: OFFSET quitPrompt
				; Registers changed:  edx, eax
				;------------------------------------------------------------------------------

 00000230			quit PROC

				; Set up message in edx
 00000230  55				push	ebp
 00000231  8B EC			mov		ebp, esp
 00000233  8B 55 08			mov		edx, PARAM_1

				; Prompt the user and return bool in eax
 00000236  E8 00000000 E		call	WriteString
 0000023B  E8 00000000 E		call	ReadInt
 00000240  5D				pop		ebp
 00000241  C3				ret		1 * TYPE PARAM_1

 00000242			quit ENDP


				;------------------------------------------------------------------------------
				; finish
				;
				; Description:        Prints the Goodbye message
				; Pre-conditions:	  byePrompt pushed onto stack
				; Post-conditions:	  none
				; Parameters:		  PARAM_1: OFFSET byePrompt
				; Registers changed:  edx
				;------------------------------------------------------------------------------

 00000242			farewell PROC															

				; Set up message in edx
 00000242  E8 00000000 E		call	CrLf
 00000247  55				push	ebp
 00000248  8B EC			mov		ebp, esp
 0000024A  8B 55 08			mov		edx, PARAM_1

				; Print the Goodbye message
 0000024D  E8 00000000 E		call	WriteString
 00000252  E8 00000000 E		call	CrLf
 00000257  5D				pop		ebp
 00000258  C3				ret		1 * TYPE PARAM_1

 00000259			farewell ENDP


				END main
Microsoft (R) Macro Assembler Version 14.24.28315.0	    02/23/20 18:43:24
/Program 5                 Program5_wrighada.as		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000059A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000259 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 000001FA _TEXT	Length= 00000036 Public STDCALL
  START_LOOP . . . . . . . . . .	L Near	 00000203 _TEXT	
  COUNT_LOOP . . . . . . . . . .	L Near	 0000020E _TEXT	
  NUM_FOUND  . . . . . . . . . .	L Near	 00000219 _TEXT	
  NEXT_NUMBER  . . . . . . . . .	L Near	 00000221 _TEXT	
  FINISH_COUNT . . . . . . . . .	L Near	 0000022E _TEXT	
displayList  . . . . . . . . . .	P Near	 00000122 _TEXT	Length= 00000053 Public STDCALL
  PRINT_ARR_1  . . . . . . . . .	L Near	 00000142 _TEXT	
  PRINT_ARR_2  . . . . . . . . .	L Near	 0000015B _TEXT	
  PRINT_CRLF . . . . . . . . . .	L Near	 00000162 _TEXT	
  FINISH_PRINT . . . . . . . . .	L Near	 0000016E _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001B8 _TEXT	Length= 00000042 Public STDCALL
  EVEN_MEDIAN  . . . . . . . . .	L Near	 000001D7 _TEXT	
  ODD_MEDIAN . . . . . . . . . .	L Near	 000001F8 _TEXT	
  FINISH_MEDIAN  . . . . . . . .	L Near	 000001F8 _TEXT	
exchangeElements . . . . . . . .	P Near	 0000019E _TEXT	Length= 0000001A Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000242 _TEXT	Length= 00000017 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000101 _TEXT	Length= 00000021 Public STDCALL
  ARRAY_FILL . . . . . . . . . .	L Near	 0000010A _TEXT	
introduction . . . . . . . . . .	P Near	 000000CB _TEXT	Length= 00000036 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000CB Public STDCALL
  MAIN_LOOP  . . . . . . . . . .	L Near	 00000019 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
quit . . . . . . . . . . . . . .	P Near	 00000230 _TEXT	Length= 00000012 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000175 _TEXT	Length= 00000029 Public STDCALL
  OUTER_LOOP . . . . . . . . . .	L Near	 0000017C _TEXT	
  INNER_LOOP . . . . . . . . . .	L Near	 00000180 _TEXT	
  INCREMENT  . . . . . . . . . .	L Near	 00000194 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAY_SIZE . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNT_LIST_SIZE  . . . . . . . .	Number	 00000014h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PARAM_1  . . . . . . . . . . . .	Text   	 [ebp + 8]
PARAM_2  . . . . . . . . . . . .	Text   	 [ebp + 12]
PARAM_3  . . . . . . . . . . . .	Text   	 [ebp + 16]
PARAM_4  . . . . . . . . . . . .	Text   	 [ebp + 20]
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RANGE_HI . . . . . . . . . . . .	Number	 0000001Dh   
RANGE_LO . . . . . . . . . . . .	Number	 0000000Ah   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000226 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byePrompt  . . . . . . . . . . .	Byte	 000001FB _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruct . . . . . . . . . . . .	Byte	 00000042 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listMsg  . . . . . . . . . . . .	Byte	 00000185 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianMsg  . . . . . . . . . . .	Byte	 0000015B _DATA	
numCounts  . . . . . . . . . . .	DWord	 00000546 _DATA	
programmer . . . . . . . . . . .	Byte	 00000021 _DATA	
quitPrompt . . . . . . . . . . .	Byte	 000001D7 _DATA	
quitVal  . . . . . . . . . . . .	DWord	 00000596 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortMsg  . . . . . . . . . . . .	Byte	 00000169 _DATA	
unsortMsg  . . . . . . . . . . .	Byte	 0000013D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
