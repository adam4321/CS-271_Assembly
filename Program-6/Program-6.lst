Microsoft (R) Macro Assembler Version 14.24.28315.0	    03/15/20 23:11:55
/Program 6                 Program6_wrighada.as		     Page 1 - 1


				TITLE Program 6                 Program6_wrighada.asm

				; Author:						Adam Wright
				; Last Modified:				3-15-2020
				; OSU email address:			wrighada@oregonstate.edu
				; Course number/section:		cs271-400
				; Project Number:               6  
				; Due Date:						3-15-2020
				; Description:					Assembly program which requests 10 32 bit signed 
				;								integers from the user and then prints the list,
				;								the sum, and then the average of those numbers


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;  -------------------------------------------------------------------------------  ; CONSTANT DEFINITIONS

 = 0000000A			ARRAY_SIZE = 10 																	; Constant holding the number of values to gather
 = 0000001F			STR_SIZE = 31																		; Constant holding the input size

 = [ebp + 8]			PARAM_1 EQU [ebp + 8]																; Explicit stack offset for parameter 1
 = [ebp + 12]			PARAM_2 EQU [ebp + 12]																; Explicit stack offset for parameter 2
 = [ebp + 16]			PARAM_3 EQU [ebp + 16]																; Explicit stack offset for parameter 3
 = [ebp + 20]			PARAM_4 EQU [ebp + 20]																; Explicit stack offset for parameter 4
 = [ebp + 24]			PARAM_5 EQU [ebp + 24]																; Explicit stack offset for parameter 5
 = [ebp + 28]			PARAM_6 EQU [ebp + 28]																; Explicit stack offset for parameter 6
 = [ebp + 32]			PARAM_7 EQU [ebp + 32]																; Explicit stack offset for parameter 7
 = [ebp + 36]			PARAM_8 EQU [ebp + 36]																; Explicit stack offset for parameter 8


				;  -------------------------------------------------------------------------------	; MACRO DEFINITIONS

				;------------------------------------------------------------------------------
				; displayString
				;
				; Description:        MACRO that prints a string while storing and restoring edx
				; Pre-conditions:	  Parameter passed is the address of an array
				; Post-conditions:	  String printed to the console
				; Parameters:		  ptr_buffer
				; Registers changed:  None
				;------------------------------------------------------------------------------

				displayString MACRO ptr_buffer
					push	edx
					mov		edx, ptr_buffer
					call	WriteString
					pop		edx
				ENDM


				;------------------------------------------------------------------------------
				; getString
				;
				; Description:        MACRO that prompts the user for a string while 
				;					  storing and restoring ecx and edx
				; Pre-conditions:	  Parameter passed is a variable to hold the  
				;					  address of a string
				; Post-conditions:	  String stored in the chosen variable 
				; Parameters:		  ptr_prompt, ptr_varName, VAR_SIZE
				; Registers changed:  None
				;------------------------------------------------------------------------------

				getString MACRO ptr_prompt, ptr_varName, VAR_SIZE
				    push    ecx
				    push    edx
					displayString ptr_prompt
				    mov     edx, ptr_varName
					mov		ecx, VAR_SIZE
					call	ReadString
					pop		edx
					pop		ecx
				ENDM


				;  -------------------------------------------------------------------------------  ; VARIABLE DEFINITIONS

 00000000			.data																				
 00000000 2A 2A 20 50 72	intro		BYTE	"** Program-6 -- Designing low-level I/O procedures **", 0
	   6F 67 72 61 6D
	   2D 36 20 2D 2D
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 2A 2A 00
 00000036 2A 2A 20 50 72	programmer	BYTE	"** Programmed by Adam Wright **", 0
	   6F 67 72 61 6D
	   6D 65 64 20 62
	   79 20 41 64 61
	   6D 20 57 72 69
	   67 68 74 20 2A
	   2A 00
 00000056 50 6C 65 61 73	instruct	BYTE	"Please provide 10 signed decimal integers.", 0dh, 0ah
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A
 00000082  45 61 63 68 20				BYTE	"Each number needs to be small enough "
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20
 000000A7  74 6F 20 66 69				BYTE	"to fit inside a 32 bit register.", 0dh, 0ah
	   74 20 69 6E 73
	   69 64 65 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 0D 0A
 000000C9  41 66 74 65 72				BYTE	"After you have finished inputting the raw numbers "
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
 000000FB  49 20 77 69 6C				BYTE	"I will display a list", 0dh, 0ah
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 0D 0A
 00000112  6F 66 20 74 68				BYTE	"of the integers, their sum, "
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20
 0000012E  61 6E 64 20 74				BYTE	"and their average value.", 0dh, 0ah, 0
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 00
 00000149 50 6C 65 61 73	userPrompt	BYTE	"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000168 45 52 52 4F 52	errMsg		BYTE	"ERROR: You did not enter a signed number or "
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20
 00000194  79 6F 75 72 20				BYTE	"your number was too big.", 0dh, 0ah, 0
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 0D
	   0A 00
 000001AF 50 6C 65 61 73	errPrompt	BYTE	"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001C2 59 6F 75 20 65	listMsg		BYTE	"You entered the following numbers: ", 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000001E6 54 68 65 20 73	sumMsg		BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000204 54 68 65 20 72	avgMsg		BYTE	"The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 0000021D 50 72 65 73 73	quitPrompt	BYTE	"Press 1 to quit and 2 to continue: ", 0
	   20 31 20 74 6F
	   20 71 75 69 74
	   20 61 6E 64 20
	   32 20 74 6F 20
	   63 6F 6E 74 69
	   6E 75 65 3A 20
	   00
 00000241 47 6F 6F 64 2D	byePrompt	BYTE	"Good-bye, and thanks for using my program!", 0
	   62 79 65 2C 20
	   61 6E 64 20 74
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   75 73 69 6E 67
	   20 6D 79 20 70
	   72 6F 67 72 61
	   6D 21 00
 0000026C 00000001		quitVal		DWORD	1																; Integer holding 1 to quit or any other value to continue
 00000270  0000000A [		numArray	SDWORD	ARRAY_SIZE DUP(?)												; Empty array for holding the entered and verified numbers
	    00000000
	   ]
 00000298  0000001F [		strTemp		BYTE	STR_SIZE DUP(?), 0												; Empty string for receiving user input
	    00
	   ] 00
 000002B8 00000000		testedNum	SDWORD	0																; Variable for receiving a validated number
 000002BC 00000000		numSum		SDWORD	0																; Variable for receiving the sum of the verified numbers
 000002C0 00000000		numAvg		SDWORD	0																; Variable for receiving the average of the verified numbers


				;  -------------------------------------------------------------------------------  ; EXECUTABLE INSTRUCTIONS

 00000000			.code
 00000000			main PROC

				; Introduce title, programmer, and instructions
 00000000  68 00000056 R		push	OFFSET instruct
 00000005  68 00000036 R		push	OFFSET programmer
 0000000A  68 00000000 R		push	OFFSET intro
 0000000F  E8 00000096			call	introduction

 00000014			MAIN_LOOP:																			; Restart (quitVal == 1) JMP From: line-154

				; Request and validate 10 SDWORD from the user
 00000014  68 000002B8 R		push	OFFSET testedNum
 00000019  68 000001AF R		push	OFFSET errPrompt
 0000001E  68 00000168 R		push	OFFSET errMsg
 00000023  68 00000149 R		push	OFFSET userPrompt
 00000028  6A 0A			push	ARRAY_SIZE
 0000002A  68 00000270 R		push	OFFSET numArray
 0000002F  6A 1F			push	STR_SIZE
 00000031  68 00000298 R		push	OFFSET strTemp
 00000036  E8 00000198			call	getValues

				; Calculate sum and average of numbers
 0000003B  68 000002C0 R		push	OFFSET numAvg
 00000040  68 000002BC R		push	OFFSET numSum
 00000045  6A 0A			push	ARRAY_SIZE
 00000047  68 00000270 R		push	OFFSET numArray
 0000004C  E8 000001B7			call	calculations

				; Display the results to the console
 00000051  6A 1F			push	STR_SIZE
 00000053  6A 0A		    push    ARRAY_SIZE
 00000055  68 00000298 R		push	OFFSET strTemp
 0000005A  68 000002C0 R	    push    OFFSET numAvg
 0000005F  68 00000204 R		push	OFFSET avgMsg
 00000064  68 000002BC R	    push    OFFSET numSum
 00000069  68 000001E6 R		push	OFFSET sumMsg
 0000006E  68 00000270 R	    push    OFFSET numArray
 00000073  68 000001C2 R		push	OFFSET listMsg
 00000078  E8 00000224			call	printRslt

				; Ask if the user wants to quit
 0000007D  68 0000021D R		push	OFFSET quitPrompt
 00000082  E8 0000029C			call	quit																	; Returns quitVal bool in eax
 00000087  A3 0000026C R		mov		quitVal, eax

				; Check the value set in the quit procedure
 0000008C  83 3D 0000026C R		cmp		quitVal, 1
	   01
 00000093  0F 85 FFFFFF7B		jne		MAIN_LOOP																; Enter 1 to reset JMP To: line-115

				; Function that says "Good-bye"
 00000099  68 00000241 R		push	OFFSET byePrompt
 0000009E  E8 0000029B			call	farewell

				; Exit to operating system
					exit							
 000000A3  6A 00	   *	    push   +000000000h
 000000A5  E8 00000000 E   *	    call   ExitProcess

 000000AA			main ENDP


				;  -------------------------------------------------------------------------------  ; PROCEDURE DEFINITIONS

				;------------------------------------------------------------------------------
				; introduction
				;
				; Description:       Prints the Introductory message using displayString macro
				; Pre-conditions:	 4 string pointers pushed onto stack
				; Post-conditions:	 Introduction printed
				; Parameters:		 PARAM_1: OFFSET intro, PARAM_2: OFFSET programmer
				;					 PARAM_3: OFFSET instruct
				; Registers changed: None
				;------------------------------------------------------------------------------

 000000AA			introduction PROC

				; Print the title message
 000000AA  55				push	ebp
 000000AB  8B EC			mov		ebp, esp
 000000AD  60			    pushad
 000000AE  E8 00000000 E		call	CrLf
					displayString PARAM_1
 000000B3  52		     1		push	edx
 000000B4  8B 55 08	     1		mov		edx, PARAM_1
 000000B7  E8 00000000 E     1		call	WriteString
 000000BC  5A		     1		pop		edx

				; Print the programmer message
 000000BD  E8 00000000 E		call	CrLf
					displayString PARAM_2
 000000C2  52		     1		push	edx
 000000C3  8B 55 0C	     1		mov		edx, PARAM_2
 000000C6  E8 00000000 E     1		call	WriteString
 000000CB  5A		     1		pop		edx

				; Print the instructions and finish
 000000CC  E8 00000000 E		call	CrLf
 000000D1  E8 00000000 E		call	CrLf
					displayString PARAM_3
 000000D6  52		     1		push	edx
 000000D7  8B 55 10	     1		mov		edx, PARAM_3
 000000DA  E8 00000000 E     1		call	WriteString
 000000DF  5A		     1		pop		edx
 000000E0  E8 00000000 E		call	CrLf
 000000E5  61			    popad
 000000E6  5D				pop		ebp
 000000E7  C3				ret		3 * TYPE PARAM_1

 000000E8			introduction ENDP


				;------------------------------------------------------------------------------
				; readVal
				;
				; Description:       Converts a string from stdin into a 32 bit signed integer
				;                    and loops until a valid number is entered
				; Pre-conditions:	 Necessary parameters pushed onto the stack in order
				; Post-conditions:	 Valid 32bit signed integer stored in testedNum
				; Parameters:		 PARAM_1: OFFSET strTemp, PARAM_2: STR_SIZE (value)
				;					 PARAM_3: OFFSET userPrompt, PARAM_4: OFFSET errMsg
				;					 PARAM_5: OFFSET errPrompt, PARAM_6: OFFSET testedNum
				; Registers changed: None
				;------------------------------------------------------------------------------

 000000E8			readVal PROC

				; Set up registers
 000000E8  55				push	ebp
 000000E9  8B EC			mov		ebp, esp
 000000EB  60				pushad
 000000EC  8B 75 08			mov		esi, PARAM_1

				; Call macro to request a number
					getString PARAM_3, PARAM_1, PARAM_2
 000000EF  51		     1	    push    ecx
 000000F0  52		     1	    push    edx
 000000F1  52		     2		push	edx
 000000F2  8B 55 10	     2		mov		edx, PARAM_3
 000000F5  E8 00000000 E     2		call	WriteString
 000000FA  5A		     2		pop		edx
 000000FB  8B 55 08	     1	    mov     edx, PARAM_1
 000000FE  8B 4D 0C	     1		mov		ecx, PARAM_2
 00000101  E8 00000000 E     1		call	ReadString
 00000106  5A		     1		pop		edx
 00000107  59		     1		pop		ecx
 00000108  BA 00000000			mov		edx, 0
 0000010D  BB 0000000A			mov		ebx, 10
 00000112  8B C8			mov		ecx, eax
 00000114  8B 75 08			mov		esi, [PARAM_1]
 00000117  FC				cld
 00000118  EB 38			jmp		VALIDATE																; First attempt at this number JMP To: line-246

 0000011A			ERROR_PROMPT:																		; After invalid entry JMP From: line-279, 281, 288, 290 304, 306, 323, 325

				; Print error and request a valid number
 0000011A  E8 00000000 E		call	CrLf
					displayString PARAM_4
 0000011F  52		     1		push	edx
 00000120  8B 55 14	     1		mov		edx, PARAM_4
 00000123  E8 00000000 E     1		call	WriteString
 00000128  5A		     1		pop		edx
					getString PARAM_5, PARAM_1, PARAM_2
 00000129  51		     1	    push    ecx
 0000012A  52		     1	    push    edx
 0000012B  52		     2		push	edx
 0000012C  8B 55 18	     2		mov		edx, PARAM_5
 0000012F  E8 00000000 E     2		call	WriteString
 00000134  5A		     2		pop		edx
 00000135  8B 55 08	     1	    mov     edx, PARAM_1
 00000138  8B 4D 0C	     1		mov		ecx, PARAM_2
 0000013B  E8 00000000 E     1		call	ReadString
 00000140  5A		     1		pop		edx
 00000141  59		     1		pop		ecx
 00000142  BA 00000000			mov		edx, 0
 00000147  BB 0000000A			mov		ebx, 10
 0000014C  8B C8			mov		ecx, eax
 0000014E  8B 75 08			mov		esi, [PARAM_1]
 00000151  FC				cld

 00000152			VALIDATE:																			; Check the leading byte JMP From: line-232

				; Pull the first byte and check for negative
 00000152  AC				lodsb
 00000153  3C 2D			cmp		al, 45
 00000155  74 06			je		REMOVE_MINUS															; Leading Minus JMP To: line-256
 00000157  3C 2B			cmp		al, 43
 00000159  74 05			je		REMOVE_PLUS																; Leading Plus JMP To: line-262
 0000015B  EB 06			jmp		NO_SIGN																	; No leading sign JMP To: line-268
					
 0000015D			REMOVE_MINUS:																		; Negative number JMP From: line-251

				; Pull off a minus sign
 0000015D  49				dec		ecx
 0000015E  EB 06			jmp		NEGATIVE

 00000160			REMOVE_PLUS:																		; Positive number with '+' JMP From: line-253

				; Pull off a plus sign
 00000160  49				dec		ecx
 00000161  EB 25			jmp		POSITIVE

 00000163			NO_SIGN:																			; No sign JMP From: line-254

				; Pull off nothing and reload first byte
 00000163  4E				dec		esi
 00000164  EB 22			jmp		POSITIVE																; Process positive value JMP To: line-298

 00000166			NEGATIVE:																			; Process negative value LOOP From: line-290

				; Validate possible negative entry
 00000166  AC				lodsb
 00000167  3C 30			cmp		al, 48
 00000169  7C AF			jl		ERROR_PROMPT															; Invalid char JMP To: line-234
 0000016B  3C 39			cmp		al, 57
 0000016D  7F AB			jg		ERROR_PROMPT															; Invalid char JMP To: line-234
					
				; Process valid negative digit
 0000016F  2C 30			sub		al, 48
 00000171  0F B6 F8			movzx	edi, al
 00000174  8B C2			mov		eax, edx
 00000176  F7 E3			mul		ebx
 00000178  70 A0			jo		ERROR_PROMPT															; Prevent overflow of edx JMP To: line-234
 0000017A  03 C7			add		eax, edi
 0000017C  70 9C			jo		ERROR_PROMPT															; Prevent overflow of eax JMP To: line-234
 0000017E  8B D0			mov		edx, eax
 00000180  E2 E4			loop	NEGATIVE																; LOOP through negative string To: line-274

				; Turn processed number negative
 00000182  F7 D8			neg		eax
 00000184  8B D0			mov		edx, eax
 00000186  EB 24			jmp		NUMBER_RANGE															; Negative number converted, now must check range JMP To: line-319

 00000188			POSITIVE:																			; Process positive value LOOP From: line-317

				; Validate possible positive value
 00000188  AC				lodsb
 00000189  3C 30			cmp		al, 48
 0000018B  7C 8D			jl		ERROR_PROMPT															; Invalid char JMP To: line-234
 0000018D  3C 39			cmp		al, 57
 0000018F  7F 89			jg		ERROR_PROMPT															; Invalid char JMP To: line-234

				; Process valid positive digit
 00000191  2C 30			sub		al, 48
 00000193  0F BE F8			movsx	edi, al
 00000196  8B C2			mov		eax, edx
 00000198  F7 E3			mul		ebx
 0000019A  0F 80 FFFFFF7A		jo		ERROR_PROMPT															; Prevent overflow of edx JMP To: line-234
 000001A0  03 C7			add		eax, edi
 000001A2  0F 80 FFFFFF72		jo		ERROR_PROMPT															; Prevent overflow of eax JMP To: line-234
 000001A8  8B D0			mov		edx, eax
 000001AA  E2 DC			loop	POSITIVE																; LOOP To: line-299

 000001AC			NUMBER_RANGE:																		; Check converted number's range JMP From: line-297

				; Check that the number is between min and max int size
 000001AC  81 FA 7FFFFFFF		cmp		edx, 2147483647
 000001B2  0F 8F FFFFFF62		jg		ERROR_PROMPT															; Number above signed 32bit size JMP To: line-234
 000001B8  81 FA 80000000		cmp		edx, -2147483648
 000001BE  0F 8C FFFFFF56		jl		ERROR_PROMPT															; Number below signed 32bit size JMP To: line-234	
					
				; Store validated number in testedNum
 000001C4  8B 45 1C			mov		eax, [PARAM_6]
 000001C7  89 10			mov		[eax], edx

				; Clean up and return
 000001C9  E8 00000000 E		call	CrLf
 000001CE  61				popad
 000001CF  5D				pop		ebp
 000001D0  C2 0018			ret		6 * TYPE DWORD

 000001D3			readVal ENDP


				;------------------------------------------------------------------------------
				; getValues
				;
				; Description:       Gets 10 valid numbers and stores them in an array
				; Pre-conditions:	 Necessary parameters pushed onto the stack in order
				; Post-conditions:	 10 valid 32bit signed integers stored in numArray
				; Parameters:		 PARAM_1: OFFSET strTemp, PARAM_2: STR_SIZE (value)
				;					 PARAM_3: OFFSET numArray, PARAM_4: ARRAY_SIZE
				;					 PARAM_5: OFFSET userPrompt, PARAM_6: OFFSET errMsg
				;					 PARAM_7: OFFSET errPrompt, PARAM_8: OFFSET testedNum
				; Registers changed: None
				;------------------------------------------------------------------------------

 000001D3			getValues PROC

				; Set up registers
 000001D3  55				push	ebp
 000001D4  8B EC			mov		ebp, esp
 000001D6  60				pushad
 000001D7  8B 4D 14			mov		ecx, PARAM_4
 000001DA  8B 7D 10			mov		edi, PARAM_3
 000001DD  8B 75 08			mov		esi, PARAM_1

 000001E0			FILL_LOOP:																			; For filling the array LOOP From: line-379

				; Call proc to get string and return num in testedNum
 000001E0  FF 75 24			push	PARAM_8
 000001E3  FF 75 20			push	PARAM_7
 000001E6  FF 75 1C			push	PARAM_6
 000001E9  FF 75 18			push	PARAM_5
 000001EC  FF 75 0C			push	PARAM_2
 000001EF  FF 75 08			push	PARAM_1
 000001F2  E8 FFFFFEF1			call	readVal

				; Number passed validation so add it to the array
 000001F7  8B 45 24			mov		eax, [PARAM_8]
 000001FA  8B 18			mov		ebx, [eax]
 000001FC  89 1F			mov		[edi], ebx
 000001FE  83 C7 04			add		edi, 4
 00000201  E2 DD			loop	FILL_LOOP																; LOOP To: line-363

				; Clean up and return
 00000203  61				popad
 00000204  5D				pop		ebp
 00000205  C2 0020			ret		8 * TYPE DWORD

 00000208			getValues ENDP


				;------------------------------------------------------------------------------
				; calculations
				;
				; Description:        Calculates the sum and average of numArray
				; Pre-conditions:	  Necessary parameters pushed onto the stack in order
				; Post-conditions:	  Sum stored in numSum and rounded average stored in numAvg
				; Parameters:		  PARAM_1: OFFSET numArray, PARAM_2: ARRAY_SIZE (value)
				;					  PARAM_3: OFFSET numSum, PARAM_4: OFFSET numAvg
				; Registers changed:  None
				;------------------------------------------------------------------------------

 00000208			calculations PROC

				; Set up registers
 00000208  55				push	ebp
 00000209  8B EC			mov		ebp, esp
 0000020B  60				pushad
 0000020C  8B 7D 08			mov		edi, [PARAM_1]
 0000020F  8B 4D 0C			mov		ecx, PARAM_2
 00000212  B8 00000000			mov		eax, 0

 00000217			SUM_lOOP:																			; LOOP through array From: line-416

				; Sum up the values in the array
 00000217  8B 1F			mov		ebx, [edi]
 00000219  03 C3			add		eax, ebx
 0000021B  83 C7 04			add		edi, 4
 0000021E  E2 F7			loop	SUM_LOOP																; LOOP To: line-410

				; Store sum in numSum
 00000220  8B 5D 10			mov		ebx, [PARAM_3]
 00000223  89 03			mov		[ebx], eax

				; Calculate the average
 00000225  8B 5D 0C			mov		ebx, PARAM_2
 00000228  99				cdq
 00000229  F7 FB			idiv	ebx
 0000022B  83 F8 00			cmp		eax, 0
 0000022E  7C 08			jl		ROUND_NEGATIVE															; If negative JMP To: line-435

				; Round >= 0.5 up to next integer
 00000230  83 FA 05			cmp		edx, 5
 00000233  7C 0B			jl		AVERAGE_FINISHED														; If positive remainder < 0.5 JMP To: line-443
 00000235  40				inc		eax
 00000236  EB 08			jmp		AVERAGE_FINISHED														; After rounding JMP To: line-443

 00000238			ROUND_NEGATIVE:																		; JMP From: line-427

				; Round <= 0.5 down to next lower integer
 00000238  F7 DA			neg		edx
 0000023A  83 FA 05			cmp		edx, 5
 0000023D  7C 01			jl		AVERAGE_FINISHED														; If negative remainder < 0.5 JMP To: line-443
 0000023F  48				dec		eax

 00000240			AVERAGE_FINISHED:																	; JMP From: line-431, 433, 440

				; Store the average in numAvg
 00000240  8B 5D 14			mov		ebx, [PARAM_4]
 00000243  89 03			mov		[ebx], eax

				; Clean up and return
 00000245  61				popad
 00000246  5D				pop		ebp
 00000247  C2 0010			ret		4 * TYPE DWORD

 0000024A			calculations ENDP


				;------------------------------------------------------------------------------
				; writeVal
				;
				; Description:        Converts a 32bit signed integer to a string and prints
				;					  it to the console using displayString
				; Pre-conditions:	  Necessary parameters pushed onto the stack in order
				; Post-conditions:	  Numbers converted to string and printed to console
				; Parameters:		  PARAM_1: number (value), PARAM_2: OFFSET strTemp
				; Registers changed:  None
				;------------------------------------------------------------------------------

 0000024A			writeVal PROC

				; Set up registers
 0000024A  55				push	ebp
 0000024B  8B EC			mov		ebp, esp
 0000024D  60				pushad
 0000024E  FC				cld
 0000024F  8B 45 08			mov		eax, [PARAM_1]
 00000252  8B 7D 0C			mov		edi, [PARAM_2]
 00000255  BB 0000000A			mov		ebx, 10
 0000025A  6A 00			push	0

				; Check for sign of number
 0000025C  83 F8 00			cmp		eax, 0
 0000025F  7C 15			jl		NEGATIVE_INT															; If int < 0, then JMP To: line-505

 00000261			POSITIVE_INT:																		; Loop to create positive number byte JMP From: line-494

				; Process a positive signed int digit
 00000261  99				cdq
 00000262  F7 FB			idiv	ebx
 00000264  83 C2 30			add		edx, 48
 00000267  52				push	edx

				; Quotient == 0, then digit is finished
 00000268  83 F8 00			cmp		eax, 0
 0000026B  75 F4			jne		POSITIVE_INT															; More positive bytes to process JMP To: line-484

 0000026D			FILL_POSITIVE:																		; Fill positive number string JMP From: line-502

				; Pop the positive numbers from the stack
 0000026D  58				pop		eax
 0000026E  AA				stosb
 0000026F  83 F8 00			cmp		eax, 0
 00000272  75 F9			jne		FILL_POSITIVE															; More positive bytes JMP To: line-496
 00000274  EB 1C			jmp		FINISH_CONVERT															; Positive string created JMP To: line-532

 00000276			NEGATIVE_INT:																		; Loop to create negative number bytes JMP From: line-516

				; Process a negative signed int to string
 00000276  99				cdq
 00000277  F7 FB			idiv	ebx
 00000279  F7 DA			neg		edx
 0000027B  83 C2 30			add		edx, 48
 0000027E  52				push	edx

				; Quotient == 0, then digit is finished
 0000027F  83 F8 00			cmp		eax, 0
 00000282  75 F2			jne		NEGATIVE_INT															; More negative bytes to process JMP To: line-505

				; Add minus sign to negative number string
 00000284  B0 2D			mov		al, 45
 00000286  88 07			mov		[edi], al
 00000288  47				inc		edi

 00000289			FILL_NEGATIVE:																		; Fill negative number string JMP From: line-529

				; Pop the positive numbers from the stack
 00000289  58				pop		eax
 0000028A  AA				stosb
 0000028B  83 F8 00			cmp		eax, 0
 0000028E  75 F9			jne		FILL_NEGATIVE															; More negative bytes JMP To: line-523
 00000290  EB 00			jmp		FINISH_CONVERT															; Negative number string created JMP To: line-532

 00000292			FINISH_CONVERT:																		; Number string created JMP From: line-502, 530

				; Print the string to the console
					displayString PARAM_2
 00000292  52		     1		push	edx
 00000293  8B 55 0C	     1		mov		edx, PARAM_2
 00000296  E8 00000000 E     1		call	WriteString
 0000029B  5A		     1		pop		edx

				; Clean up and return
 0000029C  61				popad
 0000029D  5D				pop		ebp
 0000029E  C2 0008			ret		2 * TYPE DWORD

 000002A1			writeVal ENDP


				;------------------------------------------------------------------------------
				; printRslt
				;
				; Description:       Print the array, sum, and average with their accompanying
				;					 messages. It calls writeVal to convert the numbers to strings
				; Pre-conditions:	 Necessary parameters pushed onto the stack in order
				; Post-conditions:	 The array, sum, and average are printed to the console
				; Parameters:		 PARAM_1: OFFSET listMsg, PARAM_2: OFFSET numArray
				;					 PARAM_3: OFFSET sumMsg, PARAM_4: OFFSET numSum
				;					 PARAM_5: OFFSET avgMsg, PARAM_6: OFFSET numAvg
				;					 PARAM_7: OFFSET strTemp, PARAM_8: ARRAY_SIZE (value)
				; Registers changed: None
				;------------------------------------------------------------------------------

 000002A1			printRslt PROC

				; Set up registers
 000002A1  55				push	ebp
 000002A2  8B EC			mov		ebp, esp
 000002A4  60				pushad

				; Display entered numbers
					displayString PARAM_1
 000002A5  52		     1		push	edx
 000002A6  8B 55 08	     1		mov		edx, PARAM_1
 000002A9  E8 00000000 E     1		call	WriteString
 000002AE  5A		     1		pop		edx
 000002AF  E8 00000000 E		call	CrLf

				; Set up array printing
 000002B4  8B 4D 24		    mov		ecx, PARAM_8
 000002B7  8B 7D 0C		    mov     edi, [PARAM_2]     

 000002BA			PRINT_LOOP:																			; LOOP through number array From: line-589

				; Convert and print each array value
 000002BA  FF 75 20			push	PARAM_7
 000002BD  FF 37			push	[edi]
 000002BF  E8 FFFFFF86			call	writeVal

				; Print a comma after the first 9 numbers
 000002C4  83 F9 01			cmp		ecx, 1
 000002C7  74 13			je		ARRAY_FINISHED															; After 9th comma JMP To: line-591
 000002C9  B0 2C			mov		al, 44
 000002CB  E8 00000000 E		call	writeChar
 000002D0  B0 20			mov		al, 32
 000002D2  E8 00000000 E		call	writeChar
 000002D7  83 C7 04			add		edi, 4
 000002DA  E2 DE			loop	PRINT_LOOP																; LOOP To: line-574

 000002DC			ARRAY_FINISHED:																		; After the array is printed JMP From: line-583

				; Display the sum
 000002DC  E8 00000000 E		call	CrLf
				    displayString PARAM_3
 000002E1  52		     1		push	edx
 000002E2  8B 55 10	     1		mov		edx, PARAM_3
 000002E5  E8 00000000 E     1		call	WriteString
 000002EA  5A		     1		pop		edx
 000002EB  8B 7D 14			mov		edi, [PARAM_4]
 000002EE  FF 75 20			push	PARAM_7
 000002F1  FF 37			push	[edi]
 000002F3  E8 FFFFFF52			call	writeVal

				; Display the average
 000002F8  E8 00000000 E		call	CrLf
				    displayString PARAM_5
 000002FD  52		     1		push	edx
 000002FE  8B 55 18	     1		mov		edx, PARAM_5
 00000301  E8 00000000 E     1		call	WriteString
 00000306  5A		     1		pop		edx
 00000307  8B 7D 1C			mov		edi, [PARAM_6]
 0000030A  FF 75 20			push	PARAM_7
 0000030D  FF 37			push	[edi]
 0000030F  E8 FFFFFF36			call	writeVal

				; Clean up and return
 00000314  E8 00000000 E		call	CrLf
 00000319  E8 00000000 E		call	CrLf
 0000031E  61				popad
 0000031F  5D				pop		ebp
 00000320  C2 0020			ret		8 * TYPE DWORD

 00000323			printRslt ENDP


				;------------------------------------------------------------------------------
				; quit
				;
				; Description:        Prints the quit dialog
				;					  quitVal == 1 to quit or any other value to continue
				; Pre-conditions:	  quitPrompt pushed onto stack
				; Post-conditions:	  quitVal stored in eax upon return
				; Parameters:		  PARAM_1: OFFSET quitPrompt
				; Registers changed:  eax
				;------------------------------------------------------------------------------

 00000323			quit PROC

				; Set up message in edx
 00000323  55				push	ebp
 00000324  8B EC			mov		ebp, esp
 00000326  52				push	edx
					displayString PARAM_1
 00000327  52		     1		push	edx
 00000328  8B 55 08	     1		mov		edx, PARAM_1
 0000032B  E8 00000000 E     1		call	WriteString
 00000330  5A		     1		pop		edx

				; Prompt the user and return bool in eax
 00000331  E8 00000000 E		call	ReadInt
 00000336  E8 00000000 E		call	CrLf
 0000033B  5A				pop		edx
 0000033C  5D				pop		ebp
 0000033D  C3				ret		1 * TYPE PARAM_1

 0000033E			quit ENDP


				;------------------------------------------------------------------------------
				; finish
				;
				; Description:        Prints the Goodbye message
				; Pre-conditions:	  byePrompt pushed onto stack
				; Post-conditions:	  Goodbye printed
				; Parameters:		  PARAM_1: OFFSET byePrompt
				; Registers changed:  None
				;------------------------------------------------------------------------------

 0000033E			farewell PROC															

				; Set up message in edx
 0000033E  55				push	ebp
 0000033F  8B EC			mov		ebp, esp
 00000341  60				pushad
					displayString PARAM_1
 00000342  52		     1		push	edx
 00000343  8B 55 08	     1		mov		edx, PARAM_1
 00000346  E8 00000000 E     1		call	WriteString
 0000034B  5A		     1		pop		edx

				; Print the Goodbye message
 0000034C  E8 00000000 E		call	CrLf
 00000351  61				popad
 00000352  5D				pop		ebp
 00000353  C3				ret		1 * TYPE PARAM_1

 00000354			farewell ENDP


				END main
Microsoft (R) Macro Assembler Version 14.24.28315.0	    03/15/20 23:11:55
/Program 6                 Program6_wrighada.as		     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002C4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000354 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculations . . . . . . . . . .	P Near	 00000208 _TEXT	Length= 00000042 Public STDCALL
  SUM_lOOP . . . . . . . . . . .	L Near	 00000217 _TEXT	
  ROUND_NEGATIVE . . . . . . . .	L Near	 00000238 _TEXT	
  AVERAGE_FINISHED . . . . . . .	L Near	 00000240 _TEXT	
farewell . . . . . . . . . . . .	P Near	 0000033E _TEXT	Length= 00000016 Public STDCALL
getValues  . . . . . . . . . . .	P Near	 000001D3 _TEXT	Length= 00000035 Public STDCALL
  FILL_LOOP  . . . . . . . . . .	L Near	 000001E0 _TEXT	
introduction . . . . . . . . . .	P Near	 000000AA _TEXT	Length= 0000003E Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AA Public STDCALL
  MAIN_LOOP  . . . . . . . . . .	L Near	 00000014 _TEXT	
printRslt  . . . . . . . . . . .	P Near	 000002A1 _TEXT	Length= 00000082 Public STDCALL
  PRINT_LOOP . . . . . . . . . .	L Near	 000002BA _TEXT	
  ARRAY_FINISHED . . . . . . . .	L Near	 000002DC _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
quit . . . . . . . . . . . . . .	P Near	 00000323 _TEXT	Length= 0000001B Public STDCALL
readVal  . . . . . . . . . . . .	P Near	 000000E8 _TEXT	Length= 000000EB Public STDCALL
  ERROR_PROMPT . . . . . . . . .	L Near	 0000011A _TEXT	
  VALIDATE . . . . . . . . . . .	L Near	 00000152 _TEXT	
  REMOVE_MINUS . . . . . . . . .	L Near	 0000015D _TEXT	
  REMOVE_PLUS  . . . . . . . . .	L Near	 00000160 _TEXT	
  NO_SIGN  . . . . . . . . . . .	L Near	 00000163 _TEXT	
  NEGATIVE . . . . . . . . . . .	L Near	 00000166 _TEXT	
  POSITIVE . . . . . . . . . . .	L Near	 00000188 _TEXT	
  NUMBER_RANGE . . . . . . . . .	L Near	 000001AC _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 0000024A _TEXT	Length= 00000057 Public STDCALL
  POSITIVE_INT . . . . . . . . .	L Near	 00000261 _TEXT	
  FILL_POSITIVE  . . . . . . . .	L Near	 0000026D _TEXT	
  NEGATIVE_INT . . . . . . . . .	L Near	 00000276 _TEXT	
  FILL_NEGATIVE  . . . . . . . .	L Near	 00000289 _TEXT	
  FINISH_CONVERT . . . . . . . .	L Near	 00000292 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAY_SIZE . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PARAM_1  . . . . . . . . . . . .	Text   	 [ebp + 8]
PARAM_2  . . . . . . . . . . . .	Text   	 [ebp + 12]
PARAM_3  . . . . . . . . . . . .	Text   	 [ebp + 16]
PARAM_4  . . . . . . . . . . . .	Text   	 [ebp + 20]
PARAM_5  . . . . . . . . . . . .	Text   	 [ebp + 24]
PARAM_6  . . . . . . . . . . . .	Text   	 [ebp + 28]
PARAM_7  . . . . . . . . . . . .	Text   	 [ebp + 32]
PARAM_8  . . . . . . . . . . . .	Text   	 [ebp + 36]
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
STR_SIZE . . . . . . . . . . . .	Number	 0000001Fh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgMsg . . . . . . . . . . . . .	Byte	 00000204 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byePrompt  . . . . . . . . . . .	Byte	 00000241 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errMsg . . . . . . . . . . . . .	Byte	 00000168 _DATA	
errPrompt  . . . . . . . . . . .	Byte	 000001AF _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruct . . . . . . . . . . . .	Byte	 00000056 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listMsg  . . . . . . . . . . . .	Byte	 000001C2 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000270 _DATA	
numAvg . . . . . . . . . . . . .	DWord	 000002C0 _DATA	
numSum . . . . . . . . . . . . .	DWord	 000002BC _DATA	
programmer . . . . . . . . . . .	Byte	 00000036 _DATA	
quitPrompt . . . . . . . . . . .	Byte	 0000021D _DATA	
quitVal  . . . . . . . . . . . .	DWord	 0000026C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strTemp  . . . . . . . . . . . .	Byte	 00000298 _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 000001E6 _DATA	
testedNum  . . . . . . . . . . .	DWord	 000002B8 _DATA	
userPrompt . . . . . . . . . . .	Byte	 00000149 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
